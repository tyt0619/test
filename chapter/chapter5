提纲
漏洞定义
漏洞建模示例
漏洞分析发展过程
漏洞分析新挑战
软件架构安全分析
2

漏洞是什么
漏洞是信息系统在生命周期的各个阶段（设计、实现、
运维
等过程）中产生的某类问题，这些问题会对系统的安全（机密性
、完整性、可用性）产生影响。
漏洞条目库特点数量URL
SecurityFocus全揭露，带POC>60000http://www.securityfocus.com/bid/
OSVDB数量最大，索引丰富>100000http://www.osvdb.org/
Secunia产品分类细>58000http://secunia.com/community/advisories/
ISS XForce描述信息专业>90000http://xforce.iss.net/
CVE最全的索引>60000http://cve.mitre.org/cve/cve.html
CNVD国内的中文数据库>60000http://www.cnvd.org.cn/flaw/list.htm
3

漏洞的定义
1982年，Denning给出了访问控制漏洞的定义，认为系
统中主体对对象的访问安全策略是通过访问控制矩阵来实
现，对一个访问控制漏洞的利用就是使操作系统执行违反
安全策略的操作；
1990年，Schultz等将漏洞定义为“可以使攻击者绕过安
全措施的缺陷”；
1997年，Pfleeger
将漏洞定义为安全系统中可能被用来造
成损失或危害的脆弱点；
4

漏洞的定义
2000年，Arbaugh等人将漏洞定义为在系统的开发中，
由于技术或实施而产生的可被利用的弱点，可以引起安全
或残存的影响；
2003年微软《安全百科全书》中认为漏洞是指所有给攻
击者提供攻击机会的东西，包括目标机器上所运行服务的
配置错误、目标操作系统或应用中的缺陷和目标服务所使
用协议的弱点。
2002年美国国家标准与技术研究院发布的《关键信息安
全术语词汇表》（NIST IR 7298）认为漏洞是威胁源可以
攻击或触发的信息系统、系统安全流程、内部控制或实施
中的脆弱点；
5

漏洞的定义
2006年欧洲网络和信息安全局提出的定义：设计或实施
中的存在的弱点或错误，可以导致计算机系统、网络或协
议的安全目标出现不期望的结果；
2008年国际标准化组织和国际电工委员会（ISO/IEC）
发
布的国际标准《信息技术-安全技术-信息安全风险管理》
中指出漏洞是一个或一组资产的弱点，通过利用它可以威
胁到拥有该资产的机构的事务运营和持续性，包括支持机
构计划的信息资源；
2011年美国发布的通用漏洞及暴露（CVE）中定义漏洞
是软件中的错误，能够被攻击者利用而获得对系统或网络
的访问权。
6

我们的理解（定义）
漏洞是软件系统或产品在设计、实现、配置、运行等
过程中，由操作实体有意或无意产生的缺陷/瑕疵/错
误，它们以不同形式存在于信息系统的各个层次和环
节之中，而且随着信息系统的变化而改变。漏洞一旦
被恶意主体所利用，就会造成对信息系统的安全损害
，从而影响构建于信息系统之上正常服务的运行，
危
害信息系统及信息的安全属性。
7

漏洞分类
基于技术类型的分类
—内存破坏类
—逻辑错误类
—输入验证类
—设计错误类
—配置错误类基于利用位置的分类
—本地漏洞
—远程漏洞
基于威胁类型的分类
—获取控制
—获取信息
—拒绝服务
8

提纲
漏洞定义
漏洞建模示例
漏洞分析发展过程
漏洞分析新挑战
软件架构安全分析
9

约束模型
依赖图模型（6.1）
时序逻辑模型（6.1）
漏洞建模示例
10

David Wagner
等人将缓冲区溢出的检测规范化为整数约束
的问题，并定义了约束语言（Constraint Language）。
线形约束条件的产生
符号len(s)表示当前使用的长度（包含结束字符’\0’），范围属性为
[a,b]。Alloc(s)表示buffer
实际分配的大小,范围属性为[c,d]。
在对所有变量进行了范围推断后，再进行安全属性检查：
如果b<c，溢出不可能发生。
如果a>d，那么肯定发生。
如果d>b>c>a, 那么溢出有可能发生。
约束模型
11

提纲
漏洞定义
漏洞建模
漏洞分析发展过程
漏洞分析新挑战
软件架构安全分析
12

漏洞分析的发展
发展历程（广义漏洞分析）
原始萌芽阶段——通信安全（COMSEC）个人行为：密码破解为主
初步发展阶段——计算机安全（COMPUSEC）个人行为：逆向分析为主
高速发展阶段——互联网安全（NETSEC）学术界行为：研究多种分析技术，取得突破组织行为：简单漏洞信息的收集和发布
综合治理阶段——网际安全（CyberSecurity）国家行为：制定法律法规、国家战略等组织行为：建设漏洞库，系统化漏洞信息的收集和发布等学术界行为：研究漏洞分析技术，发现漏洞大型企业的行为：开发工具、规范流程、漏洞修复等
13

（1）原始萌芽阶段
大体时段（20世纪40年代-70年代）
计算机诞生——操作系统诞生
阶段特点
围绕通信安全的攻防，软件分析技术开始出现
防御措施
主要是信息的加密保护
分析工作（个人行为）
针对加密保护，主要采用密码破解方法
出现了初期的软件分析技术，作为编译和调试的基础
Allen在1970年提出了控制流分析技术
14

（2）初步发展阶段
大体时段（20世纪70年代-90年代）
操作系统诞生——互联网诞生
阶段特点
围绕计算机安全的攻防，漏洞分析模式较为单一，且呈
现无组织化的特点
防御措施
主要是操作系统的访问权限控制
分析工作（个人或学术团体行为）
针对操作系统访问权限控制，考虑各种技术提权
几乎都采用逆向分析、调试技术
15

（3）高速发展阶段
大体时段（20世纪90年代-2000年左右）
互联网诞生——2000年左右
阶段特点
围绕网络安全的攻防，漏洞分析技术呈现多样化，有组
织的分析行为更加突出，但还没有上升为国家行为
防御措施
网络防护，如防火墙、杀毒软件和IDS
分析工作（学术团体或组织行为）
针对网络环境下的软件，采用多种分析技术，Fuzzing
测试、污点传播、渗透测试等
某些非政府组织收集和发布漏洞信息
16

（4）综合治理阶段
大体时段（2000年左右至今）
互联网高速发展，移动互联网、物联网、云计算等新技术新应用阶段
阶段特点
围绕网际安全的攻防，漏洞分析上升为国家行为，涉及整个漏洞管控和漏洞产业的相关内容
2003年美国国土安全部《网络空间国家安全战略》
防御措施
体系化防御系统建设：建立防御体系，组建网络部队等
根据软件漏洞产业结构综合介绍国家和有关组织的工作
国家层面：政策法规制定
漏洞发现组织：开发商用大型漏洞分析工具、进行漏洞挖掘
软件开发机构：规范开发流程、软件漏洞修复
漏洞信息提供机构：系统化的发布漏洞信息、建设漏洞库17

提纲
漏洞定义
漏洞建模
漏洞分析发展过程
漏洞分析新挑战
软件架构安全分析
18

漏洞分析新挑战
移动智能终端平台漏洞分析
应用场景变化和新技术的叠加，使得漏洞的范围扩大，攻击途径更为丰富，漏洞分析需要引入新的硬件和协议安全防护机制的绕过与防护
云计算平台漏洞分析对云计算平台的漏洞分析包括了传统的软件分析、协议分析、web分析和渗透测试等技术，是多种技术的结合NIST云计算定义标准(SpecialPublication800-145,TheNISTDefinitionofCloudComputing)，NIST，
2011年理解云计算漏洞(UnderstandingCloudComputingVulnerabilities)，Grobauer等，2011年云计算安全问题分析(AnAnalysisofTheCloudComputingSecurityProblem)，Morsy等，2012年
物联网系统漏洞分析
系统的硬件环境、操作系统、通讯协议都发生了变化，漏洞分析需要分析新的系统
，建立新框架
工控系统漏洞分析工控系统设计时未考虑安全、生命周期长、专用平台对其进行漏洞分析需构建专门的工具和平台19

智能终端领域
2012年8月，法国黑客pod2g发现了苹果公司IPHONE智能手机所有版本中的短信欺骗漏洞。即，IOS操作系统处理SMS服务的PDU协议高级应用时存在漏洞，使得任何人可以使用伪造号码向任何IPHONE用户发送短信，并将受害者的回复短信引导至伪造号码。
2012年美国的黑帽大会上，安全研究人员Charlie Miller
演示了一个由于近场通信（Near Field Communication，NFC）技术而引入的安全漏洞。
NFC是一种近距离高频无线通信技术，可以在10厘米距离内实现电子身份的识别或者数据的传输。Charlie Miller
利用NFC技术在智能终端操作系统中的一个漏洞，在非接触情况下获得了被攻击终端的控制权。
20

云计算领域
虚拟机逃逸
虚拟化的本质决定了存在攻击者从虚拟环境中成功逃脱的
可能性。因此，可以把这个漏洞归类于虚拟化固有的、与云
计算高度相关的一类漏洞。
CVE-2007-5671本地提权漏洞，利用了在客操作系统里面
安装的一个驱动程序HGFS.sys，这个HGFS使主操作系统
和客操作系统可以共享文件和目录。该漏洞对IOctl提供的
参数没有进行足够的验证，导致以用户态能够读写任意的内
存地址。
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE
-
2007-5671
21

物联网领域
以智能计费系统为例，系统通常使用RFID卡作为认证凭
证，有关费用的信息都是通过对于RFID卡的读取来完成
，通过对RFID认证相关漏洞的利用，就可以伪装成其它
授信主体，从而达到欺骗的目的。
在2007年RSA安全大会上，一家名为IOActive的公司展示
了一款针对RFID技术克隆设备，该款设备首先复制目标标
签的内容，之后窃取其密码。IOActive公司原本计划在美
国的黑帽大会上也展示该设备，但是遭到相关领域厂商的强
烈反对而被迫取消。
22

工控领域
针对工业控制相应的应用软件多种多样，很难形成统一的
防护规范，应用软件面向网络应用时，就必须开放其应用
端口，随之就出现了关于这些应用的新型漏洞。
2012年4月发布的ICONICS GENESIS32缓冲区溢出漏洞
，
ICONICS GENESIS32是美国ICONICS公司研制开发的新
一代工控软件。又如Siemens SIMATIC WinCC拒绝服务漏
洞，Siemens SIMATIC WinCC关于授权问题的安全漏洞。
震网病毒：针对伊朗核设施中Siemens的工控系统进行攻
击
23

提纲
漏洞定义
漏洞建模
漏洞分析发展过程
漏洞分析新挑战
软件架构安全分析
24

漏洞分析技术
25

软件架构安全分析
软件架构
是对构成软件系统的组件及其相互联系的描述。包括：
总体组织结构和全局控制结构
通信、同步和数据访问的协议
设计元素的功能分配
物理分布
设计元素的组成
定标与性能
备选设计的选择
目标或特性包括：
可靠性、安全性、可扩展性、可定
制化、可维护性等
26

软件架构安全分析—
形式化方法
方法架构描述方法（模型）描述方法应用范围
UMLsec建模描
述分析法通过UML语言生成
UML各种图和profile通过构造型和标记值描
述，UML建模包括来自构造型应
用领域的软件
SAM结构化分
析方法描述模块，成分，
连接器及其组成进行层次化划分析大型数据或复杂系
统
DTMC马尔科夫
链法时间转移序列模块失效概率估计软件
失效概率符合DTMC的单一
机构软件
ACME组件架构
描述法ACME描述架构基
本元素体系结构模拟分析法大多数的结构化非
结构化软件
27

软件架构安全分析—
工程方法
方法架构描述方法安全需求（模型
）
描述方法分析方法
场景分析法不依赖于某种特定的架
构描述语言场景人工评审
错误用例分析法不依赖于某种特定的架
构描述语言错误用例人工评审
威胁建模法数据流图威胁建摸人工分析
28

软件架构安全分析方法比较
形式化方法
主要优点：分析过程自动化程度较高
主要缺点：应用程度较差，且大多为实验室产品
UMLsec方法较好
工程化方法
主要优点：实用性较高
主要缺点：没有自动化工具支持，而且在分析过程中，软件架构分析人员的经验对分析的结果至关重要
威胁建模方法较好


提纲
技术基础
模糊测试
动态污点传播分析
智能灰盒测试
二进制代码比对
2

二进制漏洞分析
二进制漏洞分析是以二进制代码为分析对象，结合反汇编
技术进行安全性分析。
软件发布必然会有二进制的执行程序，因此二进制分析有
广泛的实用性。
相对于源代码，二进制程序缺乏上层的结构信息和类型信
息，对其进行分析的难度很大。
常见的漏洞模式在二进制代码上的表现形式难以确定，尤其
是难以精确判断栈上缓冲区的边界
二进制代码提取过程中一些指令无法解析，甚至会出现跳
转地址不合法之类的结构性错误，分析精确性有一定劣势
。
33

二进制漏洞分析
二进制漏洞分析技术分类
静态分析——在不运行软件的前提下进行的分析过程
动态分析——运行具体程序并获取程序输出或内部状态等信息来验证或发现软件性质的过程
主要技术
模糊测试
动态污点传播
智能灰盒测试
二进制代码比对
4

提纲
技术基础
模糊测试
动态污点传播分析
智能灰盒测试
二进制代码比对
5

模糊测试
模糊测试：通过构造非预期的输入数据，并监视目标软件
运行过程中的异常结果，来发现软件故障。
在很大程度上是一种强制性的技术，简单并且有效，但测
试存在盲目性。
通过自动的或半自动的方法，反复驱动目标软件运行并为
其提供构造的输入数据，同时监控软件运行的异常结果。
6
6

模糊测试的发展概况
1989年，B. Miller
教授等人使用两个工具（fuzz和ptyjig
）以及一组脚本来测试UNIX工具程序的健壮性。
2000年，B. Miller
教授等人又对Windows NT应用程序进
行了模糊测试。
2002年，D. Aitel等人发布了一种专用于测试网络协议的
模糊测试框架SPIKE。
2004年，M. Eddington发布了一款同时支持测试网络协
议和文件格式的模糊测试框架Peach。
2011年，D. Domany发布了基于Peach和Wireshark
的模
糊测试框架HotFuzz。
77

常用模糊测试框架比较
框架语言运行平台优点缺点
AntiparserPython多平台结构简单，使用方便；跨平台使用方便代码的通用性差；自动化程度低
DfuzCUNIX/Linux功能强大，使用简单；制定了脚本语言，方便描述协议跨平台能力差；智能化不够
SPIKECUNIX/Linux引入基于块的模糊测试方法；应用广泛缺乏对Windows支持，跨平台能力差；
PeachPython多平台灵活性高，代码重用性好；设计理念先进处于发展阶段，功能不够完善，应用不够广泛
AutodafeCUNIX/Linux基于SPIKE扩展，设计起点高
；
包含调试构件缺乏对Windows支持；框架修改需要重新编译
SulleyPython多平台并行模糊测试；简化了数据表示、传输和对目标监控；可以监测并恢复测试对象状态；自动化程度高对内存测试支持不够；参考文档不够全面

模糊测试的对象
根据程序输入的不同，模糊测试可以应用在很多方面：
文件格式
网络协议
环境变量
键盘、鼠标事件
数据库
共享内存等
9

典型工具——Sulley   
Sulley框架有四个主要部分：数据生成，会话管理，监控与文
件系统以及工具。
10

数据生成
数据生成是基于目标对象的测试用例基来进行模糊化的。
一个请求是一个命名的数据单元，其中可能包括多个原始类型
、块等。
一个或多个请求组成了模糊测试的输入控制脚本。
Sulley使用基于块的方法来生成请求，每个请求使用一个新名
字，用函数s_intialize(name)进行初始化。
11

会话管理
一个会话表示针对一个或多个目标的一次模糊测试，包含
了向目标发送的多个模糊请求的序列。
会话管理部分的工作是将输入控制脚本中定义的一个或多
个请求用session的connect函数连接为一个有向无环图
。
每一个图有一个或多个根作为起点，每个节点表示一个请
求，图中分支表示可能的路径。这样可以将一个复杂协议
分解为多个单独的请求，构建一个协议图，描述所有可能
的路径。
12

监控与文件系统
Sulley有三个监控工具：
进程监控器process_monitor.py
网络监控器network_monitor.py
虚拟机控制器vmcontrol.py

监控器的作用
进程监控器
用来监控测试对象的进程是否出现错误
如果测试用例引发进程异常或崩溃，监控器将进程返回操作系统
的信息传回Sulley会话，同时将这些信息保存到crashbin文件中
。
还要负责重启进程，使得后续测试能继续进行。
网络监视器
负责监视网络通信，把通信过程记录在PCAP文件中
虚拟机控制器
用来与VMWare虚拟机进行通信。将测试对象运行在VMWare
虚
拟机上，用快照获取一个映像

Sulley的主要工具
工具功能
crash_binning.py封装和存储崩溃信息
crashbin_explorer
.py查看crashbin文件中存储的触发异常的测试用例
和信息
pcap_cleaner
.py清除网络监视器捕获的非异常用例数据包
pdml_parser
.py将XML数据包转化为Sulley模糊测试框架的请求

提纲
技术基础
模糊测试
动态污点传播分析
智能灰盒测试
二进制代码比对
16

动态污点传播分析技术
在程序运行的基础上，对数据流或控制流进行监控，从而对
数据在内存中的显式传播、数据误用等进行跟踪和检测
。
基于数据流分析的动态污点传播分析技术：主要是通过标记
来自外部的污点数据，跟踪数据在内存中的显式传播的方法
，以此来检测程序执行的特征，但是不能很好地处理隐式信
息流传播的问题，代表工具有TaintCheck、MemCheck和
Flayer
等；
基于控制流分析的动态污点传播分析技术：是对数据流分析
的补充，在外部污点数据标记、数据显式传播跟踪、数据误
用检测等操作的基础上，通过控制流的分析建立程序的CFG
，然后对CFG进行进一步的处理，设计特定的算法来实施污
点分析，从而实现对隐式信息流传播过程的监控和分析，代
表工具有dytan等。
1717

分析举例
例子中外部的污染数据从①中的fgets函数引入，存在buf
中，
图中②这条边所表示的是数据流分析对buf
的跟踪，
③处将被污染的buf
通过strcpy函数传递给other
，导致other
也被污染了，
图中④和②类似表示数据流分析对other
的跟踪，
在⑤的位置由于system的参数other
已被污染，因此system的参数是外部可控的，将导致潜在的危险.
18
18

污点动态跟踪
污点动态跟踪通常基于三种机制，提供了不同的污点跟踪
监视范围。
动态代码插桩机制
可以跟踪单个进程的污点数据流动，该机制在被分析程序中插入分析代码
，跟踪污点信息流在进程中的流动方向，污点信息只局限于该进程的用户态内存空间，因此可以对于该进程进行全面细致的分析，而且由于Sink
点一般都在系统调用接口上，恢复操作系统级的对象信息也最为方便。
全系统模拟机制
分析模拟系统每条指令的污点信息扩散路径，可以跟踪污点数据在一个操作系统内的流动，但是由于全系统模拟机制无较为明显的优势，因此采用该机制的污点跟踪系统并不常见。
虚拟机监视器机制
能力最强，通过在虚拟机监控器中增加分析污点信息流的功能，跟踪污点数据在整个客户机各个系统之间的流动，可以分析污点数据在多个处理器甚至多个操作系统之间的流动过程，信息最为真实。
1919

动态污点传播分析
20
20

提纲
技术原理
模糊测试
动态污点传播
智能灰盒测试
二进制代码比对
21

智能灰盒测试
下一节专题介绍
2222

提纲
技术原理
模糊测试
动态污点传播
智能灰盒测试
二进制代码比对
23

补丁比对是被用以挖掘“已知”漏洞。
如果一个人的某个手指破了，那么只需要看他把创可
贴贴在哪个手指上，就能够知道伤口的位置。
（伤口->  漏洞；创可贴-> 补丁中修改了代码）
例子：MS05-025,MS06-007,MS06-033,MS07-046
补丁比对
补丁比对定位漏洞代码数据流分析得到攻击代码

补丁比对技术–结构化比对
结构化比对通过“函数签名”来匹配补丁前后可执行文
件中的函数；
所谓“函数签名”，是一个三维向量S(i)=(αi,βi,
γi)；
αi表示对应控制流图中的基本块数；
βi表示对应控制流图中的边数；
γi表示该函数调用的子函数数目。
当且仅当S(i)在补丁前后唯一相等时，函数匹配。

补丁前可执行文件
原始函数集合补丁后可执行文件
原始函数集合
函数集合补丁后存在匹配函数函数集合补丁后不存在匹配函数函数集合补丁后存在匹配函数函数集合补丁后不存在匹配函数
结构化比对

当存在大量的未匹配函数时，漏洞究竟在哪里？
结构化比对

先将函数
配对，然
后再对函
数的修改
程度进行
说明
结构化比对
•A与X配对
•B与Y配对
•C和Z无法配对
A   0.9    0.8    0.7
B    0.6    0.5    0.4
C    0.3    0.2    0.1XYZ
门阀值：0.4

引入代码审核技术，寻找“可能”存在漏洞的位置
词法分析，控制流、数据流分析
如果一个人在奔跑时被人砍伤，那么伤口不可能在脚
底板上！
补丁比对技术-代码审核技术

补丁比对技术–MS08-067

补丁比对技术–MS08-067

0
3MS08-067
常规代码审查
扩展代码审查NBD
补丁比对技术–MS08-067
结果很好，在给出的修改了的三个函数中，有两个与漏洞
代码直接相关
只有在使用扩展比对时，才能得到正确的结果
扩展比对：只依赖词法分析中的模式匹配，完全追求漏报率，而不考虑误
报率。

补丁比对技术–MS08-067
补丁比对技术–MS08-067

补丁比对技术–MS08-067
补丁比对技术–MS08-067

函数引发漏洞的可能性（Dangerous Rate）：
Dangerous Rate  降低！
补丁比对技术

图形化比对的技术目的是以可视图形的形式将补丁前后每
一行代码的差异展现出来，例如：EBDS及Bindiff2。
补丁比对技术–图形化比对

37
漏洞模糊测试
二进制差异分析
漏洞模式分析
智能灰盒测试
动态污点传播基于内部结构与输入数据关系分析基于软件内部结构分析技术基于输入技术生成分析技术

•为什么源码中的技巧不能应用于二进制文件中？
–变量信息的缺失
–类型信息的缺失
•二进制代码分析的优点
–“所见非所执行”漏洞
–很多时候没有源码，如涉及到库和dll的调用
–源码分析工具往往不分析内联汇编
源码分析vs 二进制分析

总结
简要介绍了二进制漏洞分析技术的发展现状。
分类讲解了业界实用的二进制漏洞分析的关键技术方法
，
使大家能对二进制漏洞分析技术方法有一个整体了解。


提纲
技术原理
典型工具：BitBlaze
实例分析
工具pipeline
污点分析和动态符号执行
路径约束求解
漏洞触发数据生成
2

技术原理
传统模糊测试的盲目性产生于两个方面：
在测试用例生成过程中，没有结合目标系统的具体代
码实现，只是经验性的生成测试数据；
在发送测试用例进行测试过程中，各测试用例之间相
互独立、互不影响，使得一个包含n个测试用例的完整
测试被分割为n个独立的测试过程，从而无法从全局对
整个测试进行规划，无法保证将有限的测试资源合理
分配到整个目标系统代码上，有的代码被重复测试而
有的代码直到测试结束也未能被测试到。
33

技术原理
主要思路
在传统模糊测试方法的基础上发展起来的一种漏洞
分析方法，采用中间表示、污点传播分析、符号执
行、路径约束求解等技术手段，在测试过程中引入
目标系统的内在知识来辅助模糊测试的进行，从而
能够生成更有针对性的测试用例。
44

技术原理
主要步骤
首先对二进制程序进行静态分析，将二进制反汇编代码转
换成一种中间语言表示。
然后通过符号执行收集路径条件，利用约束求解工具求解
能够执行到指定路径的测试数据。经过符号执行，系统输出
了某一执行路径下的所有对输入变量的约束。每条约束都代
表了一个节点处的条件跳转满足的条件。这一系列约束是一
个逐渐细化的过程。
由于每个条件都代表了一个节点处的条件，那么给任意一
个条件取反，在对应的节点处就会执行另一个分支。通过这
种方法，只要设计合适的遍历算法，就可以用于生成进行路
径覆盖测试的数据，且效率很高。
55

技术原理
工作流程
利用静态分析方法识别出程序内
部的输入函数和敏感点；
通过搜索策略检测包含输入函数
和敏感点的危险路径；
使用敏感点逼近等算法筛选危险
路径；
利用符号执行引擎求解危险路径
的路径约束；
输出覆盖目标程序危险路径的测
试集；
对覆盖目标的测试集进行测试，
以检查程序的安全性。6
6

提纲
技术原理
典型工具：BitBlaze
实例分析
工具pipeline
污点分析和动态符号执行
路径约束求解
漏洞触发数据生成
7

BitBlaze
BitBlaze是由美国加州伯克利大学开发的一款二进制
程序分析平台，其核心思想是采用动静结合的方式对
二进制可执行程序进行分析
Vine模块：负责静态分析，能够将二进制文件中的机
器码翻译为Vine中间语言Vine IL，并且基于Vine IL
对
程序的控制流图、数据流信息以及潜在安全缺陷代码
位置进行分析；88

BitBlaze
TEMU模块：负责动态污点分析，能够对整个系统进行细粒
度的污点分析和二进制动态插桩。用户可编写基于TEMU
的
插件来获取程序的动态执行轨迹
仿真器：运行一个完整的系统（包括操作系统和应用程
序），并对相关二进制代码的执行进行细粒度的观察。
包含污点分析引擎和语法抽取器
TEMU API：编程接口，用户在此基础上开发自己的插
件
99

BitBlaze
Rudder
模块：负责动态的混合执行，即将TEMU记录
的实际执行路径和基于Vine IL中间语言的符号执行相
结合。通过对符号执行路径进行约束求解，自动生成
能够遍历更多路径的输入数据
1010

提纲
技术原理
典型工具：BitBlaze
实例分析
工具pipeline
污点分析和动态符号执行
路径约束求解
漏洞触发数据生成
11

实例分析
基于模式的二进制动态漏洞挖掘工具pipeline采用的
就是灰盒测试的技术。
以此为例对灰盒测试的技术及过程进行实例分析。
1212

实例分析
结构设计图
1313

实例分析
1414
模块名称模块功能
管理模块协调其他模块之间的工作和交互
动态污点分析模块在运行目标二进制程序的同时对其进行插桩，从而跟踪输入数据的读入、传播过程。通过动态监控二进制程序的执行过程，获得污点数据在二进制程序中的执行轨迹
约束求解模块将符号化的污点传播信息流数据进行求解，得到满足条件的输入，从而构造新的测试用例
用例选择模块计算每个测试用例相对于之前未被覆盖的代码块的代码覆盖率计算，为每一个测试用例打分，得分高的测试用例优先执行

提纲
技术原理
典型工具：BitBlaze
实例分析
工具pipeline
污点分析和动态符号执行
路径约束求解
漏洞触发数据生成
15

实例分析——污点分析和动态符号执行
使用Valgrind框架实现动态污点分析的过程
Valgrind 框架：一款用于内存调试、内存泄漏检测以
及性能分析的软件开发工具。可以对二进制程序进行
插桩操作，记录在程序运行中的内存、寄存器等底层
信息
1616

实例分析——污点分析和动态符号执行
通过把机器码
转换成它所定
义的中间语言
VEX，在中间
语言上进行操
作，最后再转
换成机器码在
虚拟环境下运
行。
1717
Valgrind基本框架

实例分析——污点分析和动态符号执行
1818

实例分析——污点分析和动态符号执行
制定相应的污染规则，保存污点数据路径
内存操作规则
寄存器操作规则
临时变量操作规则
将路径转换成符号化的表示
STP求解器（STP语法）
1919

提纲
技术原理
典型工具：BitBlaze
实例分析
工具pipeline
污点分析和动态符号执行
路径约束求解
漏洞触发数据生成
20

实例分析——路径约束求解
存在的问题：新的测试用例是基于对原有路径约束的
求反而生成的。在符号执行执行技术中，如果运行于
一个测试中的多台主机同时进行路径选择，其选择结
果很容易重复并造成后续生成用例的重叠
解决方案：取反算法中使用一个取反限定变量协调不
同主机之间的路径选择操作。在具体操作时，每个测
试用例有一个取反限定变量与之对应，该变量限定了
对应测试用例执行混合符号执行时可以进行取反操作
的下限。在具体执行取反操作时，系统将会从该变量
限定数值之上的跳转条件取反
2121

实例分析——路径约束求解
2222

实例分析——路径约束求解
上图实例代码
中，x,y作为外
部输入，假设
初始值都小于
20，整个程序
跳转树的生成
过程为右图
2323
1
2
4
3
6
5
7

提纲
技术原理
典型工具：BitBlaze
实例分析
工具pipeline
污点分析和动态符号执行
路径约束求解
漏洞触发数据生成
24

实例分析——漏洞触发数据生成
漏洞触发数据生成主要可以分为漏洞触发条件建模
、
漏洞触发条件与路径条件的求解和触发漏洞的输入数
据生成3步，主要流程图如下所示：
2525

实例分析——漏洞触发数据生成
以栈溢出型漏洞为例介绍具体实现：
栈溢出的漏洞模式可以归纳为有一个危险函数和危险
函数的参数约束关系：
如strncpy（s1, s2, len）and strlen(s1)<strlen(s2)
，表示的含义是如果一个长的字符串s2被拷贝到一个
较短的字符串s1，则一定出现溢出
2626

实例分析——漏洞触发数据生成
以栈溢出型漏洞为例介绍具体实现：
首先，需要利用符号执行技术进行查找，通过路径遍历
，
确定可以到达当前语句的路径及所需要满足的条件
假设条件是5<a<10 and 12<b<15，那么只有满足当前条件
的时候才能够执行危险语句。
执行至语句strncpy（s1, s2, len）时，例如strlen(s1)=10
，则可能触发栈溢出的条件就是strlen(s2)>10。
综合符号执行和漏洞触发条件，可以得到漏洞触发的综合
条件，满足这个条件的输入就可以触发漏洞。
即5<a<10 and 12<b<15 and strlen(s2)>10。
对于有些漏洞模式而言，可能这个综合条件不能那么确定
，则可以对可能触发漏洞的条件的输入变量进行
Fuzzing
2727

实例分析——漏洞触发数据生成
构造栈溢出表达式为：
表示第i次赋值发生的位置，表明的存储的数
据的增长方向
表示每次循环进行覆盖的字节数
表示循环步长
表示循环次数
表示栈底的位置
在污点分析模块的设计中，在设计数据存储的操作时
，就需要判断此表达式是否成立，从而实现了栈溢出
漏洞模式的描述
2828
))(()
0(1pspp
piiipiipp
1



sp

总结
简要介绍了智能灰盒测试技术的原理。
通过典型工具BitBlaze介绍和实例工具Pipeline分析，
使
大家能对智能灰盒测试技术有一个整体了解。


答案要点
模糊测试技术的原理和流程图
模糊测试是一种通过向目标系统提供非预期输入并监视异常结
果来发现软件漏洞的方法，是二进制分析。
流程图
3

InstituteofSoftware,ChineseAcademyofSciences
模糊测试与传统黑盒测试的不同
测试用例的侧重点不同
由于测试需求的不同,Fuzzing的多数都是畸形的测试用例,
黑盒测试的多数都是正确的测试用例。
测试用例的产生机理不同
Fuzzing为了产生有效的畸形数据,需要考虑到测试用例的数
据格式、目标程序的结构流程和程序运行的中间状态;
而黑盒测试只关心目标程序的外部接口和外部输入,从这个
意义上讲,现在的Fuzzing技术更接近于灰盒测试。
4

InstituteofSoftware,ChineseAcademyofSciences
答案要点
模糊测试的对象有哪些类型？
Web应用和服务器
Web浏览器
文件格式
应用程序内存
网络协议
5

InstituteofSoftware,ChineseAcademyofSciences
Web应用和服务器
环境配置
网络情况、远端服务器性能以及本地机器性能的限制，故将
被测程序运行在虚拟机下。
不仅保证在模糊测试过程中不会消耗掉本地机器的所有资源
而且目标崩溃也不会影响在本地模糊测试工具的运行
输入数据
包括URI（统一资源定位符），表单数据，cookies等。
举例
3com网络监视器应用的早期版本中，使用一个含有连续’../’
字符的URI可以允许攻击者遍历webroot目录。
6

InstituteofSoftware,ChineseAcademyofSciences
Web浏览器
现在的浏览器能够支持处理动态HTML、插件、脚本、
FTP连接等，被攻击风险增大。
模糊测试方法
包括刷新HTML页、加载Web页、测试目标为单个浏览器对
象等。
漏洞利用方法
可以进行网络钓鱼、身份窃取以及制造僵尸网络等；
攻击者通常通过垃圾邮件或者利用主流网页上的漏洞来实现
被攻击者访问恶意网页。
7

InstituteofSoftware,ChineseAcademyofSciences
文件格式
文件模糊测试模型
文件附加器：读取应用软件生成的文件并解析文件中特定标签，并与数据库进行交互。
错误值嵌入模块：在文件中插入半有效的特定类型值。
自动重启模块：能够自动启动目标软件并加载错误文件。
异常检测模块：能够检测软件状态并实时与用户交互。
8
测试效率
由于文件本身数据量大的特性而受到限制。
文件模糊测试模型

InstituteofSoftware,ChineseAcademyofSciences
应用程序内存
常见的内存数据模糊测试方法
变异循环插入方法
内存快照方法
9基于内存的模糊测试框架该方法关注在目标程序的内存
中进行模糊变异。

InstituteofSoftware,ChineseAcademyofSciences
网络协议
基于网络协议的模糊测试同样包括基于变异和基于生成的
测试方式。
基于网络协议的模糊测试需要变异包输入数据并将变异数
据传到网络服务软件，其实现方式通过简单的套接字与目
标应用通信。
10

InstituteofSoftware,ChineseAcademyofSciences
漏洞挖掘之初体验
使用EasyFuzzer
挖掘守望FTP服务器的远程溢出漏洞
11

InstituteofSoftware,ChineseAcademyofSciences
使用EasyFuzzer
挖掘守望FTP服务器的远程溢出漏洞
测试工具：EasyFuzzer1.8
下载地址：http://www.asm64.com/
测试对象：守望FTP服务器
下载地址：http://rj.baidu.com/soft/detail/29640.html
配置
2个虚拟机，windows系统，网络畅通；
PC1：192.168.161.117执行FUZZ的机器
PC2：192.168.161.106要测试的机器
12

InstituteofSoftware,ChineseAcademyofSciences
使用EasyFuzzer
挖掘守望FTP服务器的远程溢出漏洞
13PC2：配置FTP服务器
IP地址：本机的IP地址
用户名：admin
密码：123456
FTP端口：默认21
FTP根目录：选择PC1：配置EasyFuzzer
FTPFUZZ在“其他FUZZ模块”中
测试前需要填写：对方IP地址，FTP账号和密码，还有端口号

InstituteofSoftware,ChineseAcademyofSciences
使用EasyFuzzer
挖掘守望FTP服务器的远程溢出漏洞
PC1:触发崩溃的测试用例
14PC2:FTP服务器崩溃
PC1复测窗口可以用于复测，用于POC的验证以及手动的测试。
先在PC2打开FTP服务器，然后在PC1选择复测最后一个测试用例。

InstituteofSoftware,ChineseAcademyofSciences
思考
分析上述测试过程中，测试对象是什么类型，测试工
具EasyFuzzer
有哪些功能模块。
测试对象
使用了FTP协议的应用软件——守望FTP服务器属于网络协议类型
15

InstituteofSoftware,ChineseAcademyofSciences
答案要点
EasyFuzzer
有哪些功能模块？
16
确定测试目标：
根据需要，搭建目标测试环境。
输入数据：
目标协议结构或样本文件等，是生成变异数据的基础。
测试用例的生成：
对有效数据样本进行变异；
或根据协议或文件格式动态生成。
发送测试用例：
连接目标程序、发送畸形数据到目标软件。
异常监控：
监测哪条数据触发异常，并生成崩溃信息。

InstituteofSoftware,ChineseAcademyofSciences
答案要点
测试过程中，测试用例触发测试对象崩溃，说明什么
可能是漏洞，需要根据崩溃信息做进一步的分析。
通过这个工具能获得什么崩溃信息？
触发异常的测试用例FTP服务器端弹出的错误界面信息少
为了更好地定位异常，应该改进哪个功能模块？
异常监控模块可以考虑记录以下信息：内存溢出点哪个寄存器发生了错误汇编执行指令等17

InstituteofSoftware,ChineseAcademyofSciences
答案要点
模糊测试能测出什么类型的漏洞？
18模糊测试类型触发漏洞类型
Web应用和服务器拒绝服务、SQL注入、跨站脚本、目录遍历、弱认证、缓冲区溢出、
远程代码注入、远程命令执行等
Web浏览器缓冲区溢出、远程命令执行、地址栏欺骗、绕过跨域限制、绕过安全区
文件格式拒绝服务、整数溢出、缓冲区溢出、格式化字符串、逻辑错误等
应用程序内存缓冲区溢出、拒绝服务、整数溢出、格式化字符串等
网络协议缓冲区溢出、整数溢出、格式化字符串、拒绝服务等

InstituteofSoftware,ChineseAcademyofSciences
缓冲区溢出漏洞
缓冲区溢出是指输入数据超出了缓冲区的大小。溢出的数
据覆盖在合法数据上，使用精心设计的shellcode来覆盖
合法的数据，从而使shellcode得到执行。
栈溢出
堆溢出
19

InstituteofSoftware,ChineseAcademyofSciences
整数溢出漏洞
整数溢出是缓冲区溢出的一种，它可以被利用来导致用户
权限的提升等安全问题。
整数溢出的一种导致方式是在定义变量时缺少类型信息。
例如下面指令：
moveax,0xffffffff
;
addeax,2;
如果当0xffffffff
变量定义为有符号数，则0xffffffff+2等同于-1+2，但是当该变量被定义为无符号数时，该运算明显会导致整数溢出。
20

InstituteofSoftware,ChineseAcademyofSciences
格式化字符串漏洞
格式化字符串攻击的实现是由于类似printf
()本身能够接收
许多输入变量，并且输入变量的个数并没有在第一个参数
中明确指出。可能导致的结果有：
使得程序崩溃
任意一块内存读取数据
修改任意一块内存里的数据
例：#include
intmain(void)
{
inti=1,j=2,k=3;
charbuf
[]="test";printf
("%s%d%d%d\n",buf,i,j);
return0;
}
打印结果：test12195371966821

InstituteofSoftware,ChineseAcademyofSciences
拒绝服务漏洞
拒绝服务漏洞是使受害主机或网络无法及时接收并处理外
界请求，或无法及时回应外界请求。有如下两种形式：
资源耗尽
资源过载
有个形象的比喻可以深入理解DoS。
街头的餐馆是为大众提供餐饮服务，如果一群地痞流氓要对餐馆进行拒绝服务攻击的话，手段会很多，比如霸占着餐桌不结账，堵住餐馆的大门不让路，骚扰餐馆的服务员或厨子不能干活，甚至更恶劣……；
相应地，计算机和网络系统是为互联网用户提供互联网资源的，如果有黑客要进行拒绝服务攻击的话，则同样有好多手段！
22

InstituteofSoftware,ChineseAcademyofSciences
答案要点
除了FTP协议，EasyFuzzer
能否测使用别的网络协议的
应用软件？
暂时不能
Heartbleed是由Codenomicon公司使用模糊测试工具发
现的关于OpenSSL的漏洞，为什么不能用EasyFuzzer
复
现该漏洞？是由哪个功能模块决定的？
EasyFuzzer
能挖出FTP服务器的漏洞
Codenomicon公司的工具能挖OpenSSL协议的漏洞
区别在：测试用例的生成方法不同
23

InstituteofSoftware,ChineseAcademyofSciences
答案要点
分析该远程溢出漏洞和Heartbleed的区别与联系？
测试对象
FTP协议
OpenSSL
24
OpenSSL即所谓的开源安全套接
字协议，用于在Internet上提供数
据的加密传输及身份认证，确保应
用间通信的保密性和可靠性。文件传输协议FTP是用于在网络上
进行文件传输的一套标准协议，属
于网络协议组的应用层。用于控制
Internet上文件的双向传输。相同点：都是网络协议

InstituteofSoftware,ChineseAcademyofSciences
答案要点
分析该远程溢出漏洞和Heartbleed的区别与联系？
测试数据
25
FTP测试数据OpenSSL测试数据相同点：不断发送测试用例

InstituteofSoftware,ChineseAcademyofSciences
答案要点
分析该远程溢出漏洞和Heartbleed的区别与联系？
漏洞成因
26FTP测试异常分析相同点：内存漏洞
OllyDBG——动态追踪工具：SEH
链表被覆盖（4a2e4a2eH 即为A.A.）OpenSSL在用于TLS/DTLS的Heartbeat
扩展中，由于memcpy()
没有在调用心跳请求包输入作
为长度参数之前进行边界检查，导致攻击者
可以以64KB/次的速度获取内存内容。

InstituteofSoftware,ChineseAcademyofSciences
答案要点
分析该远程溢出漏洞和Heartbleed的区别与联系？
漏洞的发现方法
都是模糊测试
异常定位的方法（即漏洞分析，最后会有介绍）对于闭源的守望FTP服务器等二进制文件，采用OllyDBG等动态追踪工具对于开源的OpenSSL等功能实现，可采用源码分析定位等
漏洞利用方法
针对溢出漏洞，可以实施提权或拒绝服务等针对内存泄露漏洞，可以获取重要信息。例如Heartbleed ，可以获取X.509认证密钥、用户名、密码、即时消息、邮件、以及商业关键文档和信息。
27

InstituteofSoftware,ChineseAcademyofSciences
思考
如果要设计针对OpenSSL协议的测试用例，该如何设
计？
28

InstituteofSoftware,ChineseAcademyofSciences
答案要点
如何构造针对不同网络协议的测试用例基？
针对目标服务软件的测试用例基是依据目标软件的协议格式
来描述的。
比较流行的网络协议包括：
文件传输协议（FTP）超文本传输协议（HTTP）电子邮件协议软件厂商自定义协议等。
29

InstituteofSoftware,ChineseAcademyofSciences
文件传输协议（FTP）
FTP实现了客户端和服务器之间文件的上传与下载。FTP
命令包括访问控制命令、服务命令、传输参数命令。
30访问控制命令USER用户标记是访问服务器必须的，此命令通常是控制连接后
第一个发出的命令
PASS访问服务器所需要的密码，紧跟在USER后面
QUIT此命令终止USER
传输参数命令PASV此命令要求服务器DTP在指定的数据端口侦听，进入被动
接收请求的状态
FTP服务命令DELE删除指定目录下的文件
MKD指定目录下创建新目录
PWD显示服务器的当前工作目录名

InstituteofSoftware,ChineseAcademyofSciences
超文本传输协议（HTTP）
HTTP作为万维网交换信息的基础，允许将超文本标记语
言（HTML）文档从web服务器传送到web浏览器，使得
客户可以访问网络文档、图像或者多媒体信息等。
31GET向特定的资源发出请求，例如GET /images/case.gif HTTP/1.1,
表示从/images目录下请求case.gif
文件
POST向指定资源提交数据进行处理请求（上传文件）
DELETE请求服务器删除Request-URI所标识的资源
TRACE回显服务器收到的请求，主要用于测试或者诊断
PUT向指定资源位置上传最新内容

InstituteofSoftware,ChineseAcademyofSciences
软件未知通信协议
可采取一些手段来获取目标软件的协议格式：
分析部分开源代码获取该开源软件的通信协议；
采用逆向分析的手段获取协议中域的格式和大小，从而进行
进一步设计。
32

InstituteofSoftware,ChineseAcademyofSciences
变异算子设计
变异分析的思想是通过在待测程序中引入一组称为变异算
子的微小变化，从而得到一个语法正确，但语义不同于原
程序的新程序，称为变异体。
原始输入数据通过变异算子产生大量变异数据，进而对目标
程序进行模糊测试。
输入数据包括很多类型，不同类型对应不同的变异方式。
字符串分隔符整数静态数据类型二进制数据等
33

InstituteofSoftware,ChineseAcademyofSciences
字符串
字符串是最常用的输入数据之一，包括用户名、密码、IP
地址等。s_string()能够接收输入字符串，并产生变异。
其定义如下所示：
s_string(value,size=-1,padding="\x00",encoding="ascii",fuzzable=True,max_len=0,name=None)
函数value参数为所传递的字符串，其余参数可以设为默认
值。执行方式如下：
s_string("Thestringtobefuzzed")
34

InstituteofSoftware,ChineseAcademyofSciences
分隔符
分割符可以将字符串进行分割，以便于进行管理。例如邮
箱地址中的‘@’、‘.’等。
其定义如下所示：
s_delim(value,fuzzable=True,name=None)
函数value参数为所传递的字符串，其余参数可以设为默认
值。如：
s_delim(“Thedelimtobefuzzedsuchas‘@’,’.’”)s_delim(“Thedelimtobefuzzedsuchas‘@’,’.’”,fuzzable=False)
后者表明该字段不需要通过变异算子进行变异。
35

InstituteofSoftware,ChineseAcademyofSciences
整数
整型数值在纯文本与二进制协议中被广泛应用，例如用于
记录数据长度，表述数据结构以及其他众多用途。
其定义举例如下：
s_word(value,endian="<",format="binary",signed=False,full_range=False,fuzzable=True,name=None)
以上函数将一个2字节长的整数设为0x1234,将其字节顺序设置为小端模式，并把它用作为一个无符号型的“binary”类型的整数值。
36

InstituteofSoftware,ChineseAcademyofSciences
静态数据及二进制数据
静态类型是指静态不可变的字符串，使用了s_static
函数。函数定义及执行方式举例如下：
s_static(value,name=None)
s_static(“staticstrings”)
二进制数据函数定义及执行方式举例如下：
s_binary(value,name=None)
s_binary(“0x00\\xB6\\x41\
\x42010203”)
37

InstituteofSoftware,ChineseAcademyofSciences
设计测试用例基
块和组
块与组的设计专门用于以有序的方式拼装组合各种基本数据
类型。
块和组的衔接是由网络协议来决定的。
如果网络协议命令之间是相互独立的，则可以定义一个组，组内包括几个独立的网络命令。
如果网络协议命令之间是相互关联的，例如用户名和密码的连接，这样便可以在块与块之间构建桥梁。
38

InstituteofSoftware,ChineseAcademyofSciences
基于块的设计
以FTP协议为例
39FTP协议命令以块的形式遍历方式是从根节点开始并沿着边遍历所有节点。从“USER”开始。当该节点测试完成时，随后开
始测试“PASS”，由于必须需要用户名，故需要
在测试用例前面加上一个有效的“USER”请求。
当遍历到“CWD”节点时，需要在前面加上
“USER”和“PASS”的有效请求。这些请求之间
是相互依赖的。
针对FTP协议的测试用例基

InstituteofSoftware,ChineseAcademyofSciences
基于组的设计
以HTTP为例，分组设计将一个组内的输入数据绑定到一
个块中，能够遍历块中所有的组数据元素并进行变异。组
内的数据元素一般是相互独立的。
40HTTP协议命令格式
针对HTTP协议的测试用例基在http请求中，各请求是独立的
，故把这些命令设计到一个
组内。

InstituteofSoftware,ChineseAcademyofSciences
思考
掌握了测试用例的生成方法，就掌握了模糊测试的核
心技术
怎么才能用模糊测试技术挖出未公开漏洞？
找好用的工具
调研一下现有的工具
自己设计工具
发现现有工具的不足，进行改进
41

InstituteofSoftware,ChineseAcademyofSciences
研讨内容与研讨要求
研讨内容
通过对现有模糊测试工具的调研和比较，思考设计模糊测试工具考虑的因素。
启发模糊测试工具的改进思路，并举例说明。
分析EasyFuzzer
测试得到的异常结果，说明如何定位异常的触发点。
研讨问题
调研现有的模糊测试工具，包括通用的和各领域的。了解各工具的特点，并比较分析通用和专用的模糊测试工具各有什么优缺点？
EasyFuzzer
工具是闭源的二进制程序，不能进行改进和自定制测试对象。如果自己设计改进工具，应该选择基于什么样的模糊测试工具？
Sulley是比较常用的开源模糊测试框架，请详细调研其设计原理并安装
使用，同时与EasyFuzzer
进行简单的功能比较。
思考现有模糊测试工具的有什么不足，改进思路有哪些？请详细说明设计思路。
42

InstituteofSoftware,ChineseAcademyofSciences
答案要点
调研各领域的模糊测试工具
43通用的文件格式网络协议ActiveXW
eb/HTMLSPIKEFileFuzzToafComRaiderMielieToolPeachFileHmsn fuzzerAxManWSFuzzerSulleyFilePSMTPFuzzerCOMbustRfuzzDfuzUFuz3RadiusfuzzerAxfuzzManglemeBunnyPDF FuzzProtoFuzzDranzerNuf
-fuzzerAutodafeSPIKEFileSECFuzzerX-FuzzerAntiparsernotSPIKEfileTFTP Fuzz

InstituteofSoftware,ChineseAcademyofSciences
答案要点
分析通用和专用的模糊测试工具各有什么优缺点
通用工具的测试对象不限，需要定制测试用例，可扩展性好
专用工具的测试对象明确，专用效率高，扩展性差
EasyFuzzer
工具是闭源的二进制程序，不能进行改进和
自定制测试对象。如果自己设计改进工具，应该选择基于
什么样的模糊测试工具？
选择开源的通用模糊测试框架
44

InstituteofSoftware,ChineseAcademyofSciences
答案要点
Sulley是比较常用的开源模糊测试框架，请详细调研其设计原
理并安装使用。
设计原理
安装说明
使用方法

InstituteofSoftware,ChineseAcademyofSciences
设计原理
Sulley框架有四个主要的组成部分：数据生成，会话管理，监
控与文件系统以及工具。

InstituteofSoftware,ChineseAcademyofSciences
数据生成
数据生成是基于目标对象的测试用例基来进行模糊化的。
一个请求是一个命名的数据单元，其中可能包括多个原始类型、
块等。
一个或多个请求组成了模糊测试的输入控制脚本。
使用基于块的方法来生成请求，每个请求使用一个新名字，用函
数s_intialize(name)进行初始化。

InstituteofSoftware,ChineseAcademyofSciences
会话管理
一个会话表示针对一个或多个目标的一次模糊测试，包含了
向目标发送的多个模糊请求的序列。
会话管理部分的工作是将输入控制脚本中定义的一个或多个
请求用session的connect函数连接为一个有向无环图，每
一个图有一个或多个根作为起点，每个节点表示一个请求，
图中分支表示可能的路径。这样可以将一个复杂协议分解为
多个单独的请求，构建一个协议图，描述所有可能的路径。

InstituteofSoftware,ChineseAcademyofSciences
监控与文件系统
进程监控器process_monitor.py，
网络监控器network_monitor.py
虚拟机控制器vmcontrol.py

InstituteofSoftware,ChineseAcademyofSciences
监控器的作用
进程监控器用来监控测试对象的进程是否出现错误，如果测试用例
引发进程异常或崩溃，监控器将进程返回操作系统的信息传回
Sulley会话，同时将这些信息保存到crashbin文件中。进程监控
器还要负责重启进程，使得后续测试能继续进行。
网络监视器负责监视网络通信，把通信过程记录在PCAP文件中。
这些PCAP文件使用测试用例号作为文件名保存，方便后续的漏洞
分析和修复。
虚拟机控制器用来与VMWare虚拟机进行通信。将测试对象运行在
VMWare虚拟机上，用快照获取一个映像。

InstituteofSoftware,ChineseAcademyofSciences
Sulley的安装（XP系统）
安装python2.5；
修改环境变量：计算机右键-》高级系统设置-》环境变量-》系统变量-》
Path；添加如下两个，中间用;隔开
安装winpcap
安装Impacket0.9.60
cmd进入安装程序所在目录，使用命令setup.py install；
安装pcapy-0.10.5及pycurl
将pyasm拷贝到pydbg下，再将pydbg放到C盘sulley的根目录
下。

InstituteofSoftware,ChineseAcademyofSciences
使用的命令
显示当前机器的网卡信息：
network_monitor.py
网络监控：抓包到c盘的pcaps文件夹下
python network_monitor.py –d 3 –f “srcor dstport 80” –p c:\pcaps\
再开一个cmd，开启进程监控
process_monitor.py
监视待测软件
python process_monitor.py –c C:\imagsvr.crash –p imagsvr.exe    
运行testhttp.py文件生成模糊测试器
查看崩溃信息，IP根据服务器的IP确定：
127.0.0.1：26000 

InstituteofSoftware,ChineseAcademyofSciences
进展图

InstituteofSoftware,ChineseAcademyofSciences
思考
改进的模糊测试工具举例思考现有模糊测试工具的有
什么不足，改进思路有哪些？请详细说明设计思路。
已经导致崩溃的测试用例，是不是可以用来指导生成一批能
快速检测到类似异常的测试用例？怎么实现？
还有什么已知知识可以用来提高测试用例的针对性？
测试的一个重要指标是代码覆盖率，怎么提高模糊测试的代
码覆盖率呢？
54

InstituteofSoftware,ChineseAcademyofSciences
答案要点
现有模糊测试工具有哪些不足？
挖掘出的漏洞大多是传统的溢出类漏洞，无法测出后门、鉴
权绕过等逻辑上的错误
也不能准确的发现多条件触发的漏洞
不能保证畸形输入数据能够覆盖到所有的分支代码
为什么？
模糊测试的关键是：测试用例的生成方法
55

InstituteofSoftware,ChineseAcademyofSciences
模糊测试技术的改进方向
提高测试用例的通过率
利用已发现的程序异常信息指导构造新测试样本
基于知识库构造测试用例
在数据库中存储大量已知的攻击模式，提高测试数据的针对性
提高测试数据的代码覆盖率
引入遗传算法
集成代码覆盖率计算工具, 实现实时监测当前代码覆盖率
引进并行和分布式技术, 有效地减少测试时间
56

InstituteofSoftware,ChineseAcademyofSciences
答案要点
模糊测试的新应用
Wi-Fi：
模糊测试工具Wdev-Fuzzer
, 它能够挖掘Wi-Fi 设备驱动程序中的安全漏洞。
VoIP：
黑客通过向VoIP 设备发送大量无效的SIP 消息使其崩溃。
智能手机
模糊测试工具Intent Fuzzer
等。
蓝牙OBEX 协议
模糊测试工具OBEX-Fuzzer
。
Cisco 路由器
模糊测试工具Cfuzzer
，可以对Cisco IOS(internetwork operating system) 
的多种协议进行安全测试。
57

InstituteofSoftware,ChineseAcademyofSciences
思考
针对新应用，该怎么设计测试用例？
原理是不变的
（开放式回答）……
58

InstituteofSoftware,ChineseAcademyofSciences
漏洞分析简介
漏洞分析是指在代码中迅速定位漏洞，弄清攻击原理，
准确地估计潜在的漏洞利用方式和风险等级的过程。
二进制文件分析
使用OllyDbg等动态调试工具打开存在漏洞的软件或附加进程，动态
跟踪程序的执行过程。
使用IDA等逆向工具进行反汇编，通过阅读、理解反汇编代码，弄懂
代码所实现的功能，找出代码存在的缺陷。
先动态调试跟踪正常程序，记录所有执行过的指令序列；然后触发漏
洞，记录攻击状况下程序执行过的指令序列。最后比较这两种执行过
的指令，重点逆向两次执行中表现不同的代码区，定位漏洞函数。
59

InstituteofSoftware,ChineseAcademyofSciences
二进制文件分析
60
可以发现EIP已经被改变。
SEH链表已经被覆盖（4a2e4a2eH 即为
A.A.）
EIP可以被修改，即可被利用，确认为漏
洞。

InstituteofSoftware,ChineseAcademyofSciences
漏洞分析简介
源码分析（以Heartbeat分析为例）
OpenSSL在用于TLS/DTLS的Heartbeat扩展中，由于memcpy()没
有在调用心跳请求包输入作为长度参数之前进行边界检查，导致攻击
者可以以64KB/次的速度获取内存内容。
61

InstituteofSoftware,ChineseAcademyofSciences
源码分析
62

InstituteofSoftware,ChineseAcademyofSciences
总结
这次研讨，复习并调研模糊测试技术的相关内容，通过使
用、分析模糊测试工具EasyFuzzer
的功能模块，思考模
糊测试技术的细节。
通过对现有模糊测试工具的调研和比较，思考模糊测试工
具的改进思路，并举例说明。
给学生展示漏洞挖掘的完整过程：从发现异常、定位异常
到确定是否为漏洞。



