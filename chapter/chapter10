搜索引擎的基础知识
◦系统架构
◦数据结构
搜索引擎的关键技术
◦文本处理
◦相关度计算
面向桌面的搜索引擎
◦用例
◦设计
1

识2014/9/9
第一部分
搜索引擎的基础知识

•概况
•宏观的系统架构
•核心的数据结构
3

•概况
•宏观的系统架构
•核心的数据结构
4

搜索引擎
◦从系统的角度看搜索引擎
需要哪些东西？
硬件
软件*
数据
◦从科学的角度看搜索引擎
怎样才能做到？
数据结构——倒排索引
核心算法——相关度
必备工具——文本处理
5

研究搜索引擎的科学——信息检索
◦例子
从全部网页中，根据用户输入的词或语句，找出对应的网页
◦具体
从大规模非结构化文档集合中，找出用户需要的文档资料
◦抽象
从一个信息集合中，找出满足用户信息需求的信息内容
6

信息检索的地基
硬件基础：计算机系统架构和网络
软件基础：系统软件和工具软件等
语言技术：对文本进行语言学处理
机器学习：积累经验提高整体效能
并行计算：大数据、高性能
……
几乎整个计算机科学领域
7

信息检索的上层
8
搜索
搜索推荐
推荐
挖掘
挖掘
信息检索
信息检索
情报处理
情报处理内容安全
内容安全
舆情分析
舆情分析

交流平台
◦国际
SIGIR、ACL、WWW、SIGKDD、WSDM、ICML
CIKM、EMNLP、COLING
◦地区
ECIR、AIRS
◦国内
全国信息检索学术会议
全国计算语言学联合会议
◦活动
TREC、NTCIR评测
9

10
ACM SIGIR
VLDB, PODS, ICDE
ASIS
Learning/Mining
NLPApplications
Statistics
Software/systems
COLING, EMNLP, ANLP
HLT
NIPS, UAI
RECOMB, PSB
JCDLInfo. Science
Info Retrieval
ACM CIKMDatabases
ACM SIGMOD
ACL
ICML
AAAI
ACM SIGKDD
ISMB
WWW
SOSP
OSDI
TREC相关领域的重要会议

•搜素引擎的价值
•内涵——应用层次
•本身是一项重要的应用，google、baidu等的核心业务
•外延——中间层次
•是支撑其他应用的API，以搜索引擎为核心的应用生态
•演进——核心层次
•是操作系统的组成部分
中国科学院大学2014年度秋季课程
11

教学和实验平台
◦SMART
基于Salto的经典理论
向量空间模型工具, C编写
◦Lemur、Indri
CMU&Umass联合开发
包含各种搜索模型，C++（可以直接对TREC语料进行处理）
◦Terrier：
格拉斯哥大学开发
包括丰富的搜索模型，Java
◦……
12

产品开发的平台
◦Lucene，索引工具
◦Nutch，开源爬虫（以Lucene为内核）
◦Solr：分布式搜索引擎（以Lucene为内核）
◦更多：http://www.searchtools.com/tools/tools-
opensource.html
13

教材◦B. Croft, D. Metzler, T. Strohman，Search Engine:  Information Retrieval in Practice, Pearson Education, 2009 (国内机械工业出版社出版的影印版和哈工大刘挺等老师翻译的中文版) ◦Christopher D. Manning, PrabhakarRaghavan& HinrichSchütze, Introduction to Information Retrieval, Cambridge University Press 2008 Electronic version (draft) can be downloaded from http://www
-
csli.stanford.edu/~hinrich/information-retrieval-book.html
◦Baeza-Yates, R. & B. Ribeiro-Neto. eds. Modern Information Retrieval. ACM Press, 1999◦William Frakes& Ricardo Baeza-Yates,  Information Retrieval Data Structures and Algorithms. PrenticeHall, 1992◦刘挺等著，信息检索系统导论，机械工业出版社，2008◦李晓明，闫宏飞，王继民著，搜索引擎--原理、技术与系统，北京：科学出版社，2005◦More resources see: http://nlp.stanford.edu/IR-book/information-
retrieval.html
14

Doug Cutting
◦Lucene-倒排索引
◦Nutch-完整Web搜索
◦Hadoop-大数据平台
15
搜索黑客*开源巨头

•概况
•宏观的系统架构
•核心的数据结构
16

信息规模
◦个人信息：个人相关信息的组织、整理、搜索等。
桌面搜索(Desktop Search)、
个人信息管理(Personal Information Management)
个人数字记忆(Personal Digital Memory)
◦企业信息：在企业内容文档的组织、管理、搜索等。
通常是作为企业内容管理(Content Management)或企业知识
管理（KonwledgeManagement）的重要组成部分
◦Web信息：在开放互联网上的进行搜索
网页
SNS
17

18
搜索引擎
系统
信息
系统
系统

系统
Bertalanffy，Ludwigvon （一般系统论
创始人）
相互联系
相互作用
的诸元素
的综合
体
钱学森（工程控制论
创始人）
系统是由相互作用
相互依赖
的若干组成部分
结合而成的，具有特定功能
的有机整体
，而且这个有机整体又是它从属
的更大系统的组成
部分
19

信息系统
由计算机硬件、计算机软件、网络和通讯设备、信息资
源
、信息用户
和信息制度
组成的；以信息处理
为核心功
能，以提供信息服务
为目的系统。
20
产
生
采
集
传
输
处
理
存
储
发
布
应
用

搜索引擎系统
21

搜索引擎系统
22

信息组织索引
倒排索引
信息检索模型
向量空间
文本处理技术
文本分析
23

•概况
•宏观的系统架构
•核心的数据结构
——
倒排索引
24

倒排索引
25

本课程主要关注文本检索（Text Retrieval）
(1) 文本检索是最早的检索应用，也仍然是目前最主
要的应用
(2)文本检索理论可以用于其他领域
(3)……
26

IR vs数据库: 结构化vs 非结构化数据
◦结构化数据即指“表”中的数据
27
EmployeeManagerSalary
SmithJones50000
ChangSmith
60000
50000IvySmith
数据库常常支持范围或者精确匹配查询。e.g.,
Salary < 60000 AND Manager = Smith.

非结构化数据
◦通常指自由文本(free text)
◦允许
关键词加上操作符号的查询
如奥运会AND 游泳
更复杂的概念性查询
找出所有的有关药物滥用(drug abuse)的网页
◦经典的检索模型一般都针对自由文本进行处理
28

布尔检索
◦针对布尔查询的检索，布尔查询是指利用AND, OR 或者
NOT操作符将词项连接起来的查询
信息AND 检索
信息OR 检索
信息AND 检索AND NOT 教材
29

一个简单的例子(《莎士比亚全集》)
需求：莎士比亚的哪部剧本包含Brutus
及Caesar
但是不包
含Calpurnia
？
◦将需求表示为布尔表达式：Brutus AND Caesar AND NOT 
Calpurnia。
30
不到100万单词，假设
每个英文单词平均长度
为8字节，则整个全集
不到10MB

Antony and CleopatraJulius CaesarThe TempestHamletOthelloMacbeth
Antony110001Brutus110100Caesar110111Calpurnia010000Cleopatra100000mercy101111
worser101110
若某剧本包含某单
词，则该位置上为1，
否则为0
BrutusANDCaesarBUTNOTCalpurnia词项-文档(term-doc)的关联矩阵

关联向量(incidence vectors)
关联矩阵的每一列(对应一篇文档)都是0/1向量，每个0/1都对应一个词项。
关联矩阵的每一行(对应一个词项)也可以看成一个0/1向量，每个0/1代表该词项在相应文档中的出现与否
给定查询Brutus AND Caesar AND NOT Calpurnia
◦取出三个词项对应的行向量，并对Calpurnia 的行向量求反，最后按位进行与操作
◦110100 AND 110111 AND 101111 = 100100. 
32

词项-文档矩阵将非常大
◦矩阵大小为500K x 1M=500G
◦但是该矩阵中最多有10亿(1G)个1
词项-文档矩阵高度稀疏(sparse).
稀疏矩阵
◦应该有更好的表示方式
比如我们仅仅记录所有1的位置
33
Why?

对每个词项t, 记录所有包含t的文档列表.
◦每篇文档用一个唯一的docID来表示，通常是正整数，如
1,2,3…
能否采用定长数组的方式来存储docID列表
34
Brutus
Calpurnia
Caesar
124561657132
124113145173
2
31
文档14中加入单词Caesar
时该如何处理? 174
54101

通常采用变长表方式
◦磁盘上，顺序存储方式比较好，便于快速读取
◦内存中，采用链表或者可变长数组方式
存储空间/易插入之间需要平衡
35
Dictionary
Postings
按docID排序(原因后面再讲)
Posting
Brutus
Calpurnia
Caesa
r
124561657132
124113145173
2
31174
54101
词典倒排(记录)表倒排记录

Tokenizer
词条流
Friends
Romans
Countrymen
Linguistic modules
修改后的词条
friend
roman
countryman
Indexer
倒排索引
friend
roman
countryman
2
4
2
13
16
1
待索引文档
Friends, Romans, countrymen.
词条化工具
语言分析工具

<词条，docID>二元组
I did enact Julius
Caesar I was killed 
i' the Capitol; 
Brutus killed me.Doc 1
So let it be with
Caesar. The noble
Brutus hath told you
Caesar was ambitiousDoc 2

按词项排序
◦然后每个词项按docID排序
索引构建的核心步骤

某个词项在单篇文档中的多次出现会被合并
拆分成词典和倒排记录表两部分
每个词项出现的文档数目(doc.  frequency, DF)会
被加入

40
指针
词项及
文档频
率
docID表

考虑如下查询（从简单的布尔表达式入手）:
◦Brutus AND Caesar
◦在词典中定位Brutus
返回对应倒排记录表(对应的docID)
◦在词典中定位Caesar
再返回对应倒排记录表
◦合并(Merge)两个倒排记录表，即求交集
41
128
34
2
4
8
16
32
64
1
2
3
5
8
13
21
Brutus
Caesar

每个倒排记录表都有一个定位指针，两个指针同时
从前往后扫描
, 每次比较当前指针对应倒排记录，
然后移动某个或两个指针。合并时间为两个表长之
和的线性时间
42
34
128
2
4
8
16
32
64
1
2
3
5
8
13
21
128
34
2
4
8
16
32
64
1
2
3
5
8
13
21
Brutus
Caesar
2
8
假定表长分别为
x和
y, 那么上述合并算法的复杂度为O(
x+y)
关键原因
: 倒排记录表按照docID排序

布尔检索的优点
◦构建简单，或许是构建IR系统的一种最简单方式
在30多年中是最主要的检索工具
当前许多搜索系统仍然使用布尔检索模型:
电子邮件、文献编目、Mac OS X Spotlight工具

文本处理技术
•自然语言处理
•信息检索模型
•相关度计算
2

信息组织索引
•倒排索引
•信息检索模型
•向量空间
•文本处理技术
•文本分析
3宏观的系统架构

提纲
•文本处理技术
•自然语言处理
•信息检索模型
•相关度计算
4

文本处理技术
•倒排索引（上节课）
–最基本的部分是词表
•问题：词汇从哪里来？
5
Dictionary
Postings
Brutus
Calpurnia
Caesar
124561657132
124113145173
2
31174
54101
词典倒排(记录)表

文本处理技术
6
文本
词条
词项
词条化工具
去停用词、归一化（词根还原、词形归并、
同义词)、….He loves you because of what 
you do for him.
He loves you because of what 
you do for him 
（10个词条）
He love you because of
what
you
do for
he
（５个词项）

文本处理技术
•倒排索引（上节课）
–最基本的部分是词表
•问题：词汇从哪里来？
•文本处理
–将整体的文本拆分成单元（词条化Tokenization ）
•词汇单元
–东亚语言
•非词单元
–日期、编码、数值、特定字符串…
–将文本单元进行必要规整（归一化Normalization ）
•英语
•欧语7

词条化(Tokenization)
•输入: “Friends, Romans and Countrymen”
•输出
: 词条(Token)
–
Friends
–
Romans
–
Countrymen
•词条就是一个字符串实例
•词条在经过进一步处理之后将放入倒排索引中
的词典中
–后面会讲
•词条化中的问题-词条如何界定?

词条化(Tokenization)
•输入: “Friends, Romans and Countrymen”
•输出
: 词条(Token)
–
Friends
–
Romans
–
Countrymen
•词条就是一个字符串实例
•词条在经过进一步处理之后将放入倒排索引中
的词典中
–后面会讲
•词条化中的问题-词条如何界定?

词条化
•一系列问题:
–Finland’s capital 
•Finland? Finlands? Finland’s?
–Hewlett-Packard 是看成Hewlett 和Packard 两
个词条还是一个词条?
•state-of-the-art:
•co-education
•lowercase, lower-case, lower case ?
–San Francisco: 到底是一个还是两个词条？
•如何判断是一个词条？

词条化中数字的处理
•3/20/91Mar. 12, 1991
20/3/91
•
55 B.C.
•
B-52  【B-52轰炸机，美国的一种轰炸机】
•
PGP 密钥：324a3df234cb23e  【PGP是一个基于RSA公匙
加密体系的邮件加密软件】
•(800) 234-2333
–通常中间有空格
–早期的IR系统可能不索引数字
•但是数字却常常很有用：比如在Web上查找错误代码•(一种处理方法是采用n-gram: 见第三讲)
–元数据是分开还是一起索引
•创建日期、格式等等

语言问题：法语和德语
•法语
–L‘ensemble  【全部】到底是一个还是两个词条?
•L ? L’ ? Le ?
•但是常常希望l’ensemble 能和un ensemble 【一组】匹配–至少在2003年以前，Google没有这样处理»国际化问题!
•德语中复合名词连写
–Lebensversicherungsgesellschaftsangestellter
–‘life insurance company employee’ 【人寿保险公司员工】
–德语检索系统往往要使用一个复合词拆分的模块，而且该模块对检索结果的提高有很大帮助
(可以提高15%) 

语言问题：中文和日文
•中文和日文词之间没有间隔:
–莎拉波娃现在居住在美国东南部的佛罗里达。
–分词结果无法保证百分百正确，“和尚”
•日文中可以同时使用多种类型的字母表
–日期/数字可以采用不同的格式
フォーチュン
500社
は
情報不足
のため
時間
あた
$500K(
約
6,000万円
)
片假名
平假名
汉字
罗马字母
而终端用户可能完全用平假名方式输入查询！

中文分词(Chinese Word Segmentation)
•对于中文，分词的作用实际上是要找出一个个的索
引单位
•例子：李明天天都准时上班
•索引单位
–字：李明天天都准时上班
•索引量太大，查全率百分百，但是查准率低，比如查“明天”
这句话也会出来
–词：李明天天都准时上班
•索引量大大降低，查准率较高，查全率不是百分百，而且还会
受分词错误的影响，比如上面可能会切分成：李明天天都准
时上班，还有：他和服务人员照相
–字词混合方式/k-gram/多k-gram混合
–一般原则，没把握的情况下细粒度优先
14

中文分词
•中文分词是很多中文文本处理的第一步
–我国科学家近日研制出一套水下反恐监控系统
我国科学家近日研制出一套水下反恐监
控系统
•分词方法
–基于是否使用词典：
•基于词典的方法：给出一部词典，根据这部词典进行
匹配
•无词典的方法：不需要词典，根据某种人工构词规则
或者统计规则从字生成词。
–规则或者统计方法：
•基于规则的方法：通过某种判定规则，确定是否为词
•统计方法：基于语料库统计+机器学习
15

中文分词
•正向最大匹配(基于词典的方法)
160    1    2    3    4    5    6
指针位置剩余词串首字最大匹配词条
0他说的确实在理他他
1说的确实在理说说
2的确实在理的的确
4实在理实实在
6理理理
他
说
的
确
实
在
理

中文分词
•逆向最大匹配(基于词典的方法)
17
指针位置剩余词串尾字最大匹配词条
6他说的确实在理理在理
4他说的确实实确实
2他说的的的
1他说说说
0他他他0    1    2    3    4    5    6
他
说
的
确
实
在
理

中文分词
•分词中遇到的两大难题：
–未登录词问题(Out of Vocabulary,OOV)：出现词
典中没有的词，如：人名、地名、机构名、一
些新词等等
–歧义问题(Ambiguition)：同一句子有多种可能的
分词结果
•交叉性歧义：我们小组合成氢气我们/小组/合成/氢气或我们/小/组合/成/氢气
•组合性歧义：他/从/马/上/下/来；我/马上/就/来/了
18

中文分词
•解决歧义和未登录词识别的基本方法:
–规则方法：分词过程中或者分词结束后根据
规则进行处理；
–统计方法：分词过程中或者分词结束后根据
统计训练信息进行处理。
–规则+统计
19

中文分词和检索
•以下是当前某些研究的结论或猜测，仅供参考
•并非分词精度高一定检索精度高
–评价标准不同
–分词规范问题：鸡蛋、鸭蛋、鹌鹑蛋……
–目标不同
•检索中的分词：
–查询和文档切分采用一致的分词系统
–速度快
–倾向细粒度，保证召回率
–多粒度并存
•搜索引擎中的分词方法
–猜想：大词典+统计+启发式规则
20

语言问题：阿拉伯文
•阿拉伯文(或希伯来文) 通常从右到左书写，但是某
些部分
(如数字)是从左到右书写
•词之间是分开的，但是单词中的字母形式会构成复
杂的连接方式
•←  →    ← →              ← 开始
•‘Algeria achieved its independence in 1962 after 132 
years of French occupation.’
•在Unicode编码方式下，表面的表示方式很复杂，但
是存储上倒是十分直接

停用词
•根据停用词表(stop list), 将那些最常见的词从词典中去掉。比如
直观上可以去掉：
–一般不包含语义信息的词: the, a, and, to, be
–汉语中的“的”、“得”、“地”等等。
–这些词都是高频词: 前30个词就占了~30% 的倒排记录表空间
•现代信息检索系统中倾向于不去掉停用词:
–在保留停用词的情况下，采用良好的压缩技术(第五章)后，停用词所占用的空间可以大大压缩，最终它们在整个倒排记录表中所占的空间比例很小
–采用良好的查询优化技术(第七章)基本不会增加查询处理的开销
–所谓的停用词并不一定没用，比如：短语查询: “King of Denmark”、歌曲名或者台词等等
: “Let it be”, “To be or not to be”、“关系型” 查询“flights to London”

词条归一化(Normalization)成词项
•将文档和查询中的词归一化成同一形式：
–U.S.A. 和USA
•归一化的结果就是词项，而词项就是我们最终
要索引的对象
•可以采用隐式规则的方法来表示多个词条可以
归一成同一词项，比如
–剔除句点
•U.S.A., USA  USA
–剔除连接符
•anti-discriminatory, antidiscriminatory  antidiscriminatory

归一化中的语言问题
•重音符: 如法语中résumé vs. resume.
•日耳曼语系中的元音变化
: 如德语中的
Tuebingen vs. Tübingen 【
德国地名】
–应该是一致的
•最重要的准则:
–用户在输入查询时遇到这些词如何输入?
•即使在有重音符号的语言中，用户也往往不输
入这些符号
–常常归一化成不带重音符号的形式
•Tuebingen, Tübingen, Tubingen Tubingen

归一化中的语言问题
•时间格式
–7月30日vs. 7/30
–日语中用假名或者汉字表示日期
•词条化和归一化都可能与语言相关，因此
必须要做语言识别
•另外，谨记要将文档和查询中的同义词归
一化成同一形式Morgen will ich in MIT… 
是德语的“mit”吗
?

大小写问题
•可以将所有字母转换成小写形式
–例外: 句中的大写单词？
•e.g., General Motors（GM，通用公司）
•Fed (美联储)vs. fed(饲养)
•SAIL (印度钢铁管理局) vs. sail(航行)
–通常情况下将所有字母转成小写是一
种很合适的方式，因为用户倾向于用
小写方式输入
•Google的例子:
–查询C.A.T.  
–排名第一的结果是“cat”而不是
Caterpillar Inc.

归一化成词项
•除了前面互换方式(即能够归一化成同一词项
的词条之间完全平等，可以互换)之外，另一
种方式是非对称扩展(asymmetric expansion)
•一个非对称扩展更适合的的例子
–输入: window搜索: window, windows
–输入
: windows搜索: Windows, windows, 
window
–输入
: Windows搜索: Windows
–为什么反过来不行？
•这种方法可能更强大，但是效率低一些

同义词词典(Thesauri)及soundex方法
•同义词和同音/同形异义词的处理
–E.g., 手动建立词典，记录这些词对
•car = automobilecolor = colour
–利用上述词典进行索引
•当文档包含automobile时, 利用car-automobile进行索引
–或者对查询进行扩展
•当查询包含automobile时，同时也查car
•拼写错误的处理(ClintonKlinten)
–一种解决方法是Soundex方法，基于发音建立词之
间的关系
(Soundex方法将在后面介绍)

词形归并(Lemmatization)
•将单词的屈折变体形式还原为原形
•例子：
–am, are, is be
–car, cars, car's, cars' car
–the boy's cars are different colors the boy car 
be different color
•词形归并意味中将单词的变形形式“适当”
还原成一般词典中的单词形式
–found find? found?

词干还原（Stemming）
•将词项归约(reduce)成其词干(stem)，然后
再索引
•“词干还原” 意味着词缀的截除
–与语言相关
–比如，将automate(s), automatic, automation都
还原成
automat
for example compressed 
and compression are both 
accepted as equivalent to 
compress.
for exampl compress and
compress ar both accept
as equival to compress

Porter算法
•英语词干还原中最常用的算法
–结果表明该方法不差于其他的词干还原方法
•一些规定+ 5 步骤的归约过程
–这些步骤有先后顺序
–每一步都包含一系列命令
•一些规定，比如: 选择可应用规则组中包含最
长词缀的规则
–SSES→SScaresses→caress
–S→cats→cat

Porter中的典型规则
•sses ss
•ies i
•ational ate
•tional tion
•规则适用条件的表达
–(m>1) EMENT →
•replacement → replac
•cement  → cement

Martin Porter
•(应该是)英国人，(应该是)剑桥
大学
•2000年度Tony Kent Strix award得
主
–信息检索领域另一个著名的奖项
•Porter’s stemmer，有很多语言
的版本
•Snowball 工具，支持多种语言的
stemming(法语、德语、葡萄牙
语、西班牙语挪威语等等)
33

其他词干还原工具(stemmer)
•Lovins: http://www.comp.lancs.ac.uk/computing/
research/stemming/general/lovins.htm
•单遍扫描，最长词缀剔除
(大概250条规则)
•全部基于词形分析–对于检索来说最多只能提供一
定的帮助(at most modest benefits for retrieval)
•词干还原及其它归一化工作对检索的帮助
–英语：结果要一分为二，对某些查询来说提高了召回
率，但是对另外一些查询来说降低了正确率
–比如, operative (dentistry) oper
–对西班牙语、德语、芬兰语等语言非常有用
–其中对于芬兰语有30% 的性能提高!
34

语言特性
•上述很多转换处理具体实现时
–都与语言本身有关，并且
–常常和具体应用有关
•上述过程可以插件方式植入索引过程
•存在很多开源和商业插件可用

•文本处理技术
•自然语言处理
•信息检索模型
•相关度计算
36提纲

现代信息检索
Gerard Salton(1927-1995)
•信息检索领域的奠基人之一，
向量空间模型的完善者和倡导
者，SMART系统的主要研制者，
ACM Fellow
•1958年毕业于哈佛大学应用数
学专业，是Howard Aiken的关门
博士生。
Howard Aiken是IBM第
一台大型机
ASCC的研制负责人。
•Salton是康奈尔大学计算机系的
创建者之一。
37

38
38
排序式检索(Ranked retrieval)
排序式检索会对查询和文档的匹配程度进行排序，即给出
一个查询和文档匹配评分
排序式检索可以避免产生过多或者过少的结果
可以通过排序技术来避免大规模返回结果，比如只需要显
示前10条结果，这样不会让用户感觉到信息太多
用户满意的前提：排序算法真的有效，即相关度大的文档
结果会排在相关度小的文档结果之前
38

39
39
排序式检索中的评分技术
我们希望，在同一查询下，文档集中相关度高的文档排名
高于相关度低的文档
如何实现？
通常做法是对每个查询-文档对赋一个[0, 1]之间的分值
该分值度量了文档和查询的匹配程度
39

40
查询-文档匹配评分计算
如何计算查询-文档的匹配得分？
先从单词项查询(查询只包含一个词项)开始
若该词项不出现在文档当中，该文档得分应该为0
该词项在文档中出现越多，则得分越高
这就是所谓词项频率(term frequency，简称tf)评分
40

41
41
二值关联矩阵
每篇文档可以看成是一个二值的向量∈{0, 1}|V|
41
Anthon
y and  
Cleopat
raJulius 
Caesa
r The  
Tempe
stHamlet Othell
o Macbet
h . . .
ANTHONYBRUTUS CAESARCALPURNIACLEOPATRAMERCYWORSER. . .111011111110000000011011001100100111010010

42
42
非二值关联矩阵(词项频率)
每篇文档可以表示成一个词频向量∈N|V
|
42
Anthon
y and  
Cleopat
raJulius 
Caesa
r The  
Tempe
stHamlet Othell
o Macbet
h . . .
ANTHONYBRUTUS CAESARCALPURNIACLEOPATRAMERCYWORSER. . .15742320572273157227100000000031022008100100511000085

词项频率tf
词项t的词项频率(以下简称词频) tf
t,d是指t 在d中出现的
次数，是与文档相关的一个量，可以认为是文档内代表度
的一个量，也可以认为是一种局部信息。
43

一种替代原始tf
的方法: 对数词频
t 在d 中的对数词频权重定义如下：
为什么要用对数？
单调增大——保序
前倨后恭
无和有
多和少
非常多：真的重要吗？是不是垃圾？
44

45
45
idf 权重
dft是出现词项t
的文档数目
dft是和词项t
的信息量成反比的一个值
于是可以定义词项t的idf权重(逆文档频率):
(其中N是文档集中文档的数目)
idft是反映词项t的信息量的一个指标，是一种全局性指
标
，反应的是词项在全局的区别性。
实际中往往计算[log N/dft]而不是[N/dft] ，这可以对idf
的影响有所抑制
值得注意的是，对于tf 和idf我们都采用了对数计算方式
45

46
46
idf
的计算样例
利用右式计算idft:
46
词项df
tidf
t
calpurnia
animal
sunday
fly
under
the1
100
1000
10,000
100,000
1,000,0006
4
3
2
1
0

47
47
idf
对排序的影响
对于单词项查询,idf对文档排序没有任何影响
idf 会影响至少包含2个词项的查询的文档排序结果
例如，在查询“arachnocentric line”中, idf权重计算方法
会增加arachnocentric的相对权重，同时降低line的相对权重
47

48
48
tf
-idf
权重计算
词项的tf-idf权重是tf权重和idf权重的乘积
信息检索中最出名的权重计算方法
注意：上面的“-”是连接符，不是减号
其他叫法：tf.idf、tf x idf
48

49
49
tf
-idf
小结
词项t在文档d中的权重可以采用下式计算
tf-idf权重
随着词项频率的增大而增大
随着词项罕见度的增加而增大
49

50
二值关联矩阵
每篇文档表示成一个二值向量∈{0, 1}|V
|
50
Anthon
y and  
Cleopat
raJulius 
Caesa
r The  
Tempe
stHamlet Othell
o Macbet
h . . .
ANTHONYBRUTUS CAESARCALPURNIACLEOPATRAMERCYWORSER. . .111011111110000000011011001100100111010010

51
51
tf
矩阵
每篇文档表示成一个词频向量∈N|V
|
51
Anthon
y and  
Cleopat
raJulius 
Caesa
r The  
Tempe
stHamlet Othell
o Macbet
h . . .
ANTHONYBRUTUS CAESARCALPURNIACLEOPATRAMERCYWORSER. . .15742320572273157227100000000031022008100100511000085

52
52
二值→  → tfidf
矩阵
每篇文档表示成一个基于tfidf权重的实值向量∈R|V
|
52
Anthon
y and  
Cleopat
raJulius 
Caesa
r The  
Tempe
stHamlet Othell
o Macbet
h . . .
ANTHONYBRUTUS CAESARCALPURNIACLEOPATRAMERCYWORSER. . .5.251.218.590.02.851.511.373.186.102.541.540.00.00.00.00.00.00.00.01.900.110.01.01.510.00.00.124.150.00.00.250.00.05.250.250.350.00.00.00.00.881.95

53
53
文档表示成向量
每篇文档表示成一个基于tfidf
权重的实值向量∈R|V
|.
于是，我们有一个|V
|维实值空间
空间的每一维都对应词项
文档都是该空间下的一个点或者向量
极高维向量：对于Web搜索引擎，空间会上千万维
对每个向量来说又非常稀疏，大部分都是0
53

54
54
查询看成向量
关键思路1: 对于查询做同样的处理，即将查询表示成同
一高维空间的向量
关键思路2: 按照文档对查询的邻近程度排序
邻近度= 相似度
邻近度≈ 距离的反面
回想一下，我们是希望和布尔模型不同，能够得到非二
值的、既不是过多或也不是过少的检索结果
这里，我们通过计算出相关文档的相关度高于不相关文
档相关度的方法来实现
54

55
55
欧氏距离不好的例子
尽管查询q和文档d
2的词项分布非常相似，但是采用欧氏距离计算
它们对应向量之间的距离非常大。
55

56
56
采用夹角而不是距离来计算
将文档按照其向量和查询向量的夹角大小来排序
假想实验：将文档d 复制一份加在自身末尾得到文档d′
. 
d′ 是d
的两倍
很显然，从语义上看，d和d′具有相同的内容
两者之间的夹角为0，代表它们之间具有最大的相似度
但是，它们的欧氏距离可能会很大
56

57
57
从夹角到余弦
下面两个说法是等价的：
按照夹角从小到大排列文档
按照余弦从大到小排列文档
这是因为在区间[0◦, 180◦]上，余弦函数cosine是一个单调
递减函数
57

58
58
查询和文档之间的余弦相似度计算
qi是第i个词项在查询q中的tf-idf权重
d
i是第i个词项在文档d
中的tf
-idf
权重
|    | 和|    | 分别是和的长度
上述公式就是和的余弦相似度，或者说向量和
的夹角的余弦
58

59
59
归一化向量的余弦相似度
归一化向量的余弦相似度等价于它们的点积(或内积)
如果和都是长度归一化后的向量
59

60
60
余弦相似度的图示
60

61
61
小结
将查询表示成tf-idf权重向量
将每篇文档表示成同一空间下的tf-idf权重向量
计算两个向量之间的某种相似度(如余弦相似度)
按照相似度大小将文档排序
将前K
（如K =10）篇文档返回给用户
向量空间(检索)模型中包含一个向量表示模型，可以广泛用
于其他领域，比如：判断论文抄袭、代码抄袭、图像相似度
计算等等

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

任务的背景
•为桌面操作系统开发搜索引擎

任务的背景
•桌面环境中的搜索的形式1
基于文件、文件夹名称的快速搜索引擎
搜索框+返回列表

任务的背景
•桌面环境中的搜索的形式2
基于文件名称和文件的元数据进行搜索
使用元数据对返回文件进行限制音乐：
wma, mp3等文档：doc, excel等程序：exe，bin代码：cpp, java, py

任务的背景
•桌面环境中的搜索的形式3
文件名元数据文件内容

任务的背景
•桌面环境中的搜索的形式4
针对一项特定的需求：启动程序输入程序名，找到并启动程序
代表性软件：Find and Run Robot, Launcher

任务的背景
•桌面环境中的搜索的形式5
需求：找到文件管理器中相同的文件输入是特定文件夹或整个硬盘

任务的背景
•桌面环境中的搜索的形式6
垃圾文件查找
搜索出所有的临时文件、垃圾文件、废弃文件

任务的背景
•桌面环境中的搜索的形式7
Email搜索

任务的背景
•桌面环境中的搜索的形式8
图片管理软件中的搜索

任务的背景
•桌面环境中的搜索的形式9
文件管理器的增强

任务的背景
•桌面环境中的搜索的形式10
与文献管理工具集成，
搜索论文的关键词、作者等等

任务的背景
•桌面环境中的搜索的形式小节

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

研发的视角
怎么搜
最终用户接口GUI应用程序接口API
搜
什
么文件信息深度：元数据、文件内容类型：文档、图片、视频
应用数据邮件QQ
…

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

系统的组成
信息感知
信息抽取
内容分析
索引
搜索
怎么搜

桌面搜索系统的组成
桌面信息感知
基本的：文件系统中的文件
为了对文件实现实时、高效的索引操作，需要有对文件系
统事件的侦听机制
，目前Linux系统这方面的基础支持在逐步完善，但是，在
OS提供的基本支持之上还需要构建适合索引、
搜索任务的事件汇聚、过滤、分类处理的整套策略。
扩展的：应用程序中的数据
原则上是开放的，任何软件、信息都可以使用搜索。
现在，OS上繁杂的搜索任务基本上是“一事一地”的做法，
典型的表现就是大多数涉及到数据的软件系统都有自己的
查找、搜索功能。
我们的考虑：提供OS级别的统一的搜索服务支持，就需要
开发服务访问接口和数据索引协议，共其他愿意使用该统
一服务的软件调用。

桌面搜索系统的组成
文档信息抽取
桌面系统上，文档格式非常多
例如MS的Office系列、Linux社区占主导地位的OpenOffice系列
、pdf
等，以及电子邮件、归档文件等等。
这部分功能的设计要注意确保重点（主要是能抽取占主导数量的文档类型）、尽可能覆盖较多的类型，以及系统具有可扩展性的架构设计，能在长的时间段上支持新出现的、变更进化的文档类型。
目前开源的文档信息抽取的软件比较分散、稳定性不理想、支持的抽取层次也很多样，抽取工具随着文档格式升级的同步性不能严格保证，所以，可能需要购买一些技术支持较好的商业抽取工具。

桌面搜索系统的组成
文档内容分析
文档内容分析主要是进行自然语言处理NLP，
基本的：分词、词性、规整化技术，
附加的：主题挖掘、多语种处理
深入的：语义分析，跨语种处理（研究性）
也包括一些数据层面的语义处理（例如元数据）。
工具：
这部分功能所需的开源工具非常繁多，主要的问题是这
些工具绝大多数都是研究性质的，而未达到生产型软件
的质量水平。此外，深入的语义分析工具往往需要自己
开发，不但有较大的工作量，关键是难度非常高。所以，
在构建可用桌面搜索系统时，设计的取舍和决策是很关
键的。

桌面搜索系统的组成
索引模块
核心地位
索引是所有信息检索类系统的核心，只有具备了倒排索引功能的系
统才能算的上是信息检索系统，信息获取的速度和效能才具有保障。
否则，只能算是具有基本查询功能的数据访问软件。基本情况
现在开源的索引软件已经基本成熟，也属于大型软件，自己从头开
发不切实际（“索引-搜索引擎”的关系类似于“内核-操作系统”的
关系）。通常，没有特别的原因应该选用开源产品，例如Lucene这个典型的索引软件包，已经经过大量使用，
具备较强的可靠性和可用性。
所以我们可以考虑使用它作为索引模块的基础。当然，如果
使用完整的桌面搜索系统改造的话，可以沿用或者替换其索引模块。研发要注意的问题多种索引软件一起工作（倒排索引、数据库索引）多种索引方式一起工作（多种语言单元切分结果）

桌面搜索系统的组成
搜索模块
基本情况
是依附于索引模块
体量一般不大，主要是“查询DSL+交互UI”
设计方面主要是要考虑便捷性、美观、信息展示效
果、互操作性等等UI设计要素
可以考虑自己定制开发
关于面向应用程序内部数据的搜索服务
提供OS级别的统一的搜索服务支持，开发服务访问
接口和搜索协议，供其他愿意使用该统一服务的软件调用。

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

程序搜索——初始界面
搜索区
推荐区1、不需要搜索直接推荐2、根据用户使用情况推荐筛选区

程序搜索——搜索
搜索结果
推荐结果
“头条”
统计量

程序搜索——启动程序
点击

程序搜索——筛选
筛选功能示例：搜索级别
点击页码或者下一页按钮进行翻页查看

开放问题思考
题目1：实时搜索
◦什么是实时搜索，涉及哪些主要方面？为什么有这样的需
求？
◦单机上如何支持实时搜索？
◦集群上如何支持实时搜索？
◦操作系统能提供哪些支持？
题目2：搜索与OS结合
◦新型操作系统及传统操作系统的新发展，及这些新特性与
搜索的关联
◦云、物联网、大数据等新计算环境下搜索引擎的新发展
◦Andriod、IOS和Win10的搜索功能设计
◦OS对搜索的需求和支持，搜索对OS的需求和支持
◦搜索成为OS核心特性（组件、功能）的必要性和可能性
（开放问题）


第三部分
面向桌面的搜索引擎

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

任务的背景
•为桌面操作系统开发搜索引擎

任务的背景
•桌面环境中的搜索的形式1
基于文件、文件夹名称的快速搜索引擎
搜索框+返回列表

任务的背景
•桌面环境中的搜索的形式2
基于文件名称和文件的元数据进行搜索
使用元数据对返回文件进行限制音乐：
wma, mp3等文档：doc, excel等程序：exe，bin代码：cpp, java, py

任务的背景
•桌面环境中的搜索的形式3
文件名元数据文件内容

任务的背景
•桌面环境中的搜索的形式4
针对一项特定的需求：启动程序输入程序名，找到并启动程序
代表性软件：Find and Run Robot, Launcher

任务的背景
•桌面环境中的搜索的形式5
需求：找到文件管理器中相同的文件输入是特定文件夹或整个硬盘

任务的背景
•桌面环境中的搜索的形式6
垃圾文件查找
搜索出所有的临时文件、垃圾文件、废弃文件

任务的背景
•桌面环境中的搜索的形式7
Email搜索

任务的背景
•桌面环境中的搜索的形式8
图片管理软件中的搜索

任务的背景
•桌面环境中的搜索的形式9
文件管理器的增强

任务的背景
•桌面环境中的搜索的形式10
与文献管理工具集成，
搜索论文的关键词、作者等等

任务的背景
•桌面环境中的搜索的形式小节

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

研发的视角
怎么搜
最终用户接口GUI应用程序接口API
搜
什
么文件信息深度：元数据、文件内容类型：文档、图片、视频
应用数据邮件QQ
…

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

系统的组成
信息感知
信息抽取
内容分析
索引
搜索
怎么搜

桌面搜索系统的组成
桌面信息感知
基本的：文件系统中的文件
为了对文件实现实时、高效的索引操作，需要有对文件系
统事件的侦听机制
，目前Linux系统这方面的基础支持在逐步完善，但是，在
OS提供的基本支持之上还需要构建适合索引、
搜索任务的事件汇聚、过滤、分类处理的整套策略。
扩展的：应用程序中的数据
原则上是开放的，任何软件、信息都可以使用搜索。
现在，OS上繁杂的搜索任务基本上是“一事一地”的做法，
典型的表现就是大多数涉及到数据的软件系统都有自己的
查找、搜索功能。
我们的考虑：提供OS级别的统一的搜索服务支持，就需要
开发服务访问接口和数据索引协议，共其他愿意使用该统
一服务的软件调用。

桌面搜索系统的组成
文档信息抽取
桌面系统上，文档格式非常多
例如MS的Office系列、Linux社区占主导地位的OpenOffice系列
、pdf
等，以及电子邮件、归档文件等等。
这部分功能的设计要注意确保重点（主要是能抽取占主导数量的文档类型）、尽可能覆盖较多的类型，以及系统具有可扩展性的架构设计，能在长的时间段上支持新出现的、变更进化的文档类型。
目前开源的文档信息抽取的软件比较分散、稳定性不理想、支持的抽取层次也很多样，抽取工具随着文档格式升级的同步性不能严格保证，所以，可能需要购买一些技术支持较好的商业抽取工具。

桌面搜索系统的组成
文档内容分析
文档内容分析主要是进行自然语言处理NLP，
基本的：分词、词性、规整化技术，
附加的：主题挖掘、多语种处理
深入的：语义分析，跨语种处理（研究性）
也包括一些数据层面的语义处理（例如元数据）。
工具：
这部分功能所需的开源工具非常繁多，主要的问题是这
些工具绝大多数都是研究性质的，而未达到生产型软件
的质量水平。此外，深入的语义分析工具往往需要自己
开发，不但有较大的工作量，关键是难度非常高。所以，
在构建可用桌面搜索系统时，设计的取舍和决策是很关
键的。

桌面搜索系统的组成
索引模块
核心地位
索引是所有信息检索类系统的核心，只有具备了倒排索引功能的系
统才能算的上是信息检索系统，信息获取的速度和效能才具有保障。
否则，只能算是具有基本查询功能的数据访问软件。基本情况
现在开源的索引软件已经基本成熟，也属于大型软件，自己从头开
发不切实际（“索引-搜索引擎”的关系类似于“内核-操作系统”的
关系）。通常，没有特别的原因应该选用开源产品，例如Lucene这个典型的索引软件包，已经经过大量使用，
具备较强的可靠性和可用性。
所以我们可以考虑使用它作为索引模块的基础。当然，如果
使用完整的桌面搜索系统改造的话，可以沿用或者替换其索引模块。研发要注意的问题多种索引软件一起工作（倒排索引、数据库索引）多种索引方式一起工作（多种语言单元切分结果）

桌面搜索系统的组成
搜索模块
基本情况
是依附于索引模块
体量一般不大，主要是“查询DSL+交互UI”
设计方面主要是要考虑便捷性、美观、信息展示效
果、互操作性等等UI设计要素
可以考虑自己定制开发
关于面向应用程序内部数据的搜索服务
提供OS级别的统一的搜索服务支持，开发服务访问
接口和搜索协议，供其他愿意使用该统一服务的软件调用。

提纲
•任务的背景
•研发的视角
•系统的构成
•示例：程序搜索

程序搜索——初始界面
搜索区
推荐区1、不需要搜索直接推荐2、根据用户使用情况推荐筛选区

程序搜索——搜索
搜索结果
推荐结果
“头条”
统计量

程序搜索——启动程序
点击

程序搜索——筛选
筛选功能示例：搜索级别
点击页码或者下一页按钮进行翻页查看

开放问题思考
题目1：实时搜索
◦什么是实时搜索，涉及哪些主要方面？为什么有这样的需
求？
◦单机上如何支持实时搜索？
◦集群上如何支持实时搜索？
◦操作系统能提供哪些支持？
题目2：搜索与OS结合
◦新型操作系统及传统操作系统的新发展，及这些新特性与
搜索的关联
◦云、物联网、大数据等新计算环境下搜索引擎的新发展
◦Andriod、IOS和Win10的搜索功能设计
◦OS对搜索的需求和支持，搜索对OS的需求和支持
◦搜索成为OS核心特性（组件、功能）的必要性和可能性
（开放问题）


研讨：信息检索技术调研
2

内容1、搜索引擎
3

内容1、搜索引擎
4按结构
网络搜索引擎——爬取数据、响应时间短
e.g.. Yahoo
企业搜索引擎——内部不同类型信息源
e.g.. Autonomy
桌面搜索引擎——混合信息
e.g.. Windows 、Apple

内容1、搜索引擎分类
5开源搜索引擎
Lucene
基于
java
的流行搜索引擎，使用的信息检索技术相对
简单。
Lemur
开源的工具包，主要用于比较先进的搜索技术。
Galago
基于
java
，速度快、有自适应能力、易于理解，融合
了非常有效的信息检索技术。

问题1、搜索引擎分析
问题：查询率低、检索效率不高、部分搜索结果太杂乱、
搜索结果排序欠佳
原因：搜索不智能
发展：
•个性化（可定制）
•多元化（从提供单一的文字、图片搜索，向提供音乐、
视
频、资讯、软件、文件等多元化的搜索发展）
6

内容2、内容抽取
•office 文档：Tika 、Word-PPT等
•Html ：HtmlParser
（Java版本）
•xml ：addxml
•日志：snort
•图片：Exif  Date Changer 、TryOCR等
编写自己的脚本
7

问题2、获取其他信息
8进程
程序
服务
内存
网络

内容3、Knowledge Graph
自然语言处理：
•自然语言处理是一门融语言学、计算机科学、数学于一体的
科学。
•实现人机间自然语言通信意味着要使计算机既能理解自然语
言文本的意义，也能以自然语言文本来表达给定的意图
、思
想等。前者称为自然语言理解，后者称为自然语言生成。
•自然语言处理，即实现人机间自然语言通信，或实现自然语
言理解和自然语言生成是十分困难的。造成困难的根本原因
是自然语言文本和对话的各个层次上广泛存在的各种各样的
歧义性或多义性（ambiguity）。
9

内容3、Knowledge Graph
10•即知识图谱
•允许用户搜索Google知道的事物
•能够显示关于你的查询的实时信息
•根据用户的意图给出用户想要的结果
•他是迈向下一代搜索业务关键的第一步，使得搜
索智能化

内容3、Knowledge Graph
本质：
“语义网络”
核心思想：
“结构就是含义”
方式：
基于图的推理；
相关信息的“关联”
具体应用：
自然语言处理中对词的知识图分析
11

问题3、Knowledge Graph
解决搜索中时间、空间问题
•order
-链
词的含义与时间
或空间顺序有关。
•cause-链
逻辑词，原因
和结果。
12

内容4、不同数据类型索引方法
局部敏感哈希(Locality-Sensitive Hashing, LSH)
※ hash functions 
•图片
对特征向量建立LSH索引
•音频
对歌曲的音频指纹建立LSH索引
why?  
海量并且高维的数据
承载的信息和载体不同
保证搜索的高效性。
13

内容5、其他检索模型
搜索引擎中的核心技术，常用信息检索模型有：
•布尔模型
•扩展的布尔模型
•BM25模型
•LSI模型
•语言模型
•概率模型
14

问题5、区别和联系
•搜索引擎中的“retrieval”：
信息按一定的方式组织起来，并根据信息用户的需要找出有关
的信息的过程和技术。
•传统算法理论中的“search”、“pattern match”：
给定一个查询词，在现有数据中进行比较查找。



