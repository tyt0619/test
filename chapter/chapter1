为什么会发生这些安全事件
    系统软硬件及其配置存在安全问题
    不安全的编程语言
    无所不在的越来越复杂的系统
    安全往往是事后补救措施

安全是有代价的，与功能存在着一定的矛盾
    开发、使用成本高
    会给系统带来额外的性能开销
    给用户使用带来不便

人们的安全意识淡薄
    使用者不关注安全
    安全审核不够

为什么会发生这些安全事件
    存在破坏系统安全的利益驱使因素及破坏手段
    利益驱使因素
    娱乐、好奇、名誉
    经济利益驱使
    政治利益驱使

手段
    恶意软件
    后门、逻辑炸弹、木马、病毒、蠕虫、僵尸

行为
    僵尸网络、系统入侵、身份盗用、数据偷窃、跨站攻击…

基本安全属性 机密性（Confidentiality）
    信息只能被泄漏给被授权的人或系统
    如：攻击者不能获得你的银行账号信息
    如：不能把wifi密码随意泄露给别人
    如：不能把我的位置信息随意告诉别人

基本安全属性 完整性
    信息不能以非授权方式被篡改
    如：攻击者不能改变你银行账号的余额
    系统不能以非授权方式被篡改
    如：恶意代码被注入
    如：核反应堆离心机不能非法地高速运转
    如：DNS记录不能被随意篡改

基本安全属性 可用性
    可向授权的人或系统及时提供对信息或服务的访问
    如：你随时可以在在线银行账号中登录并进行交易
    如：能够及时在12306订票
    如：携程网要能够及时访问
    如：切诺基要能被正常驾驶
    如：心脏起搏器要正常运行

基本安全属性 非否认性
    做过的事，能够留下证据，不能抵赖
    如：政府员工获取私密用户数据要能被记录并举证
    如：wifi被盗用必须能被记录
    如：有关核反应堆异常指令的执行要能被记录并监控

系统安全性刻画 风险（risk）
    指存在可能被误用的有价值的物品
    资产 数据（丢失或完整性） 时间 信任 生命
什么是误用
    安全属性被破坏：私密性、机密性、完整性、可用性

系统安全性刻画 威胁（threat）
    对手可以将系统置于风险之中的特定方式
    攻击者的能力/目标（偷听、欺骗、访问拒绝）
        假冒威胁：假冒公安人员的威胁电话
        篡改威胁：ARP、DNS记录被篡改
        否认威胁：否认对软件进行了误删
        信息泄露威胁：个人信息被泄露，海量骚扰电话
        拒绝服务威胁：春节无法订票
        权限提升威胁：通过VPN使用境外网络
    独立于什么能被破坏
威胁模型（threat model）
    对一个特定环境被认为是重要的风险的集合
        攻击者能力的集合
        如：攻击者可以读取并修改信道上的所有消息，并在信道上生成消息

系统安全性刻画 脆弱性（Vulnerability）
    能够被可以利用该缺陷的对手访问到的缺陷
    如：buffer-overflow, WEP key leakage
脆弱性的来源
    不好的软件（硬件）
    不好的设计，需求
    不好的策略、配置
    系统误用
    非预期的目的或环境

系统安全性刻画 对手（adversary）：
    试图绕过安全设施的任何实体
        出于好奇型
        试图了解系统的随意攻击者
        竞争对手
        政府（试图监控行为）
    用户是对手吗
        可能是内部对手

系统安全性刻画 攻击（Attack） 危害（compromise）
    指试图利用脆弱性的行为
    攻击的类型
        被动的（偷听）
        主动的（口令猜测）
        拒绝服务（DOS）
危害（compromise）
    攻击成功造成危害
        获取或改变了资源

系统安全性刻画 参与者（Participants）
    预期的系统参与实体
        计算机、代理、人、企业
        基于使用场景可以作为：服务器、客户端、用户、实体、主机、路由器
    安全是针对这些实体定义的
        每一个参与方可能有自己的视角

系统安全性刻画 可信第三方
    执行一些行为时被所有各方都信任的实体
    介绍人或仲裁者

系统安全性刻画 信任 信任模型
    指认定实体能够按预期做事的程度
    实体被预期不做什么
        如：不泄漏密码
    实体被预期做什么（义务）
        如：获得许可，刷新
    信任模型
        描述在特定环境中，各实体被信任做什么

系统安全性刻画 安全需求
    说明可预测风险集合的信任模型及威胁模型的综合
        安全需求：指有说服力并全面的设计
        任何设计都有安全模型
            LAN网络
            整体信息系统
            Java applet
            操作系统
        安全需求解决
            我们的安全关切是什么
            对手是谁
            威胁是什么
            我们信任谁做什么

谁该为信息系统安全负责
    硬件平台提供者
    系统设计开发者
    工具链提供者（编译器，运行时环境）
    系统集成商
    应用开发者
    服务提供者、内容提供者
    系统管理人员
    用户

操作系统的作用
    资源管理
    任务调度
    安全防护

操作系统的安全作用
    硬件平台：利用硬件安全机制为任务提供隔离的运行环境
    操作系统自身：提供对自身功能及数据的保护; 对系统边界的保护，防来自网络的攻击
    管理员：提供安全管理的配置工具; 提供安全管理的策略部署工具
    上层应用、用户: 提供受控的共享运行环境; 提供系统级安全服务接口
    信息系统集成商: 系统整体安全保护方案的砖瓦

系统安全设计原则
    安全设计原则-安全是有成本的
    安全设计原则-最小特权
    安全设计原则——使用缺省拒绝的策略
        缺省
            拒绝所有访问
        只允许明确许可的操作
        例如：
            防火墙
            家用wifi缺省拒绝陌生设备连入
    安全设计原则——职责分离
    安全设计原则——深度防御
    安全设计原则——用户愿意接受的安全
    安全设计原则——技术不是万能的，注意人的因素
    安全设计原则——完全仲裁
    安全设计原则——安全威胁改变，安全要从头设计
    安全设计原则——其它
        无法控制时，至少要检测危险
            密码设备
                II型，tamper-evident
                III型，tamper-resistant
        不要依赖于不公开的安全机制
        从头进行安全设计

对系统安全威胁的类型
    假冒（Masquerading）：身份攻击
    数据截取（Data Interception）：窃听
    拒绝服务（Denial of Server ）
    修改（Modification）
    伪造（Fabrication）
    否认（Repudation）
    中断（Interruption）
    通信量分析（Traffic Analysis）

典型的操作系统使用场景
操作系统提供资源管理、任务调度的服务，并为访问系统的用户提供受控共享的操作环境
    用户可登陆系统访问系统内部资源
    系统中的用户可通过网络与其它系统进行交互
    用户可通过存储介质输入、输出数据

操作系统应对机制
安全问题    应对机制
    操作系统有绝对权威吗？能维持好秩序吗？基础安全保护机制
    Ta是声称的用户吗？标识与鉴别
    主体能对客体中的信息进行访问吗？访问控制
    发生安全纠纷如何处理？证据从哪来？安全审计
    存储介质中的信息被别人拿走随便改随便看怎么办？基于密码的数据机密性、完整性保护
    原存储秘密的空间没清除干净怎么办？剩余信息清除机制
    对手从网络入侵系统怎么办？防火墙
    怎么确定用户打交道的是系统本身？通道是安全的？可信路径
    系统的安全策略不可能是固定不变的，怎么帮助管理员部署策略？安全管理

操作系统基本安全保护机制简介
要解决的问题
    操作系统（内核）核心程序需要有比用户程序更高的特权
    防止应用程序对操作系统内核影响，对各进程的存储空间进行相互隔离
解决办法
    存储保护
    运行保护
特点
    基于硬件的机制

存储保护
    防护的目的
        防止对内存的未授权访问
        防止对内存的错误读写
        防止用户的不当操作破坏内存数据区、程序区、系统区
        保证不同程序内存区域互不影响
        隔离用户与内存，向用户隐藏数据、程序在内存中的具体位置
    实现方式
        Base/bounds 寄存器
        标记保护法
        分段保护
        分页保护
        数据执行保护（DEP）
        地址空间随机化（ASLR）

运行保护
    CPU模式
        系统模式（内核模式）：可执行任何指令、可访问任何内存地址（如硬件设备地址）、可使能/禁用中断、可改变特权处理器的状态、可访问内存管理单元、可修改各种描述表的寄存器
        用户模式：只可访问有限的内存
        用户模式到系统模式的切换只可通过系统调用进行
    系统调用：
        通过特殊的计算机指令完成
        特权代码检查普通代码设置的处理器状态、堆栈，判断是否许可访问

典型安全机制介绍
    标识与鉴别
    访问控制
    安全审计
    其它

标识与鉴别-要解决的问题
    每个与系统进行交互的用户（实体）都要能被区分
        要有唯一身份证号
    用户的身份不能被假冒
    代表用户执行任务的主体要继承用户的安全相关属性。

标识与鉴别-基本概念
    用户标识符：
        用来标明用户身份，确保用户的唯一性和可辨识性的标志。
    用户标识
        指系统要标识用户的身份，并未每个用户确定一个可以标识的内部名称
    用户鉴别：
        用来将用户与用户标识符联系起来的机制叫做用户鉴别。鉴别过程用来识别用户的真实身份。
    用户鉴别数据：
        为验证各个用户标识所需的信息（口令、证书等等）
    用户属性：
        用户的许可证、安全特性等等

用户标识与鉴别要做什么
    对用户进行创建、修改、维护、删除的全生命周期管理
    为每个用户分配一个唯一标识符，并与用户名相关联对用户的鉴别信息进行管理
    根据全局安全策略，为用户设置恰当的用户属性
    根据系统的用户鉴别策略及用户鉴别数据，对发起认证请求的用户在质询过程中的行为及提供的数据进行检查，确定用户的标识。
    为鉴别成功的用户创建会话任务，并设置相应用户的安全属性。

用户鉴别的基本途径
    What you know
        知识、口令、密码
    What you have
        身份证、信用卡、钥匙、令牌
    What you are
        指纹、笔迹、声音、手型、脸型、视网膜、虹膜
    多因素认证

典型的认证方式
    口令认证：
        用户登录时，系统通过比对用户输入的用户ID及口令信息，判断用户身份的合法性。
    基于PKI的双因子认证：
        创建用户是为用户分配公私钥对，认证时，系统使用公钥验证用户使用私钥加密的数据，确定用户是唯一拥有对应私钥的实体。
        口令成为用户访问私钥的令牌。
    基于智能卡/Ukey的认证：
        一般使用基于PKI的双因子认证方式，但私钥在硬件模块中被生成、使用，不出硬件设备。
    生物特征认证
        获得指纹、视网膜、声音等特征，与鉴别信息库进行比对

标识与鉴别-存在的问题
以口令认证为例说明设计中要注意的问题
    用户鉴别数据可能被窃取、修改
        窃取：防止从鉴别数据直接推断口令
        修改：保证只有特权用户通过特定方式才能修改口令
    通过字典攻击尝试口令
        增加口令强度，扩大口令空间
        限制每次尝试认证的间隔及次数
        定义口令的生存期
        增加人为参与的因素
    系统与用户间的通讯通道被控制
        保护通道的机密性、完整性
        增加系统方发起的随机数、时间戳，防止重放攻击、中间人攻击
    防止用户端口令的窥探
        用户端口令不回显

标识与鉴别-存在的问题
引入更有效的身份鉴别机制
    基于智能卡及Ukey的认证
        硬件辅助，扩大鉴别信息的空间
        加强用户端鉴别信息的保护
    生物识别认证
        不再需要繁杂的口令
    已有问题是否被消除，是否引入新的问题？
        鉴别信息的空间仍然有限
        生物特征的难于获取，且存在不稳定性，存在误判情况
        语音识别、图像识别的引入，增加了用户端窥探的途径

标识与鉴别-技术的发展
当前环境下的标识与鉴别
需要认证的不再限于用户，广泛的互联互通，使信任边界发生变化：
    硬件平台、软件组件、系统自身、执行操作时的环境因素都可能需要认证
    特别的平台证实：可信计算技术
计算机系统日趋复杂，操作系统常常不再直接承担最终用户管理的任务
    操作系统的用户管理，变为系统管理维护人员的管理
    单点登录的支持（与应用账号、网络账号协同）

访问控制-解决的问题
    防止对任何资源（计算资源、通信资源、信息资源）进行未授权的访问
        非法用户进入系统访问资源
        合法用户对系统资源的非法使用
    根据什么授权
        组织策略
        需要防范的风险
    防止什么样的访问
        使用、泄露、修改、销毁信息
        非法操作

访问控制-基本概念
主体（Subject）：发起操作的活动实体
    如用户、进程、虚拟机
客体（Object）：将被执行操作的被动实体
    文件、进程
权限：执行的操作
授权（Authorization）：确定主体是否有执行某操 作的权限
    读、写、执行或拒绝访问
    主客体关系是相对的
访问控制策略：规定访问控制的安全规则

主体属性：是主体的特征，是系统用来决定访问控制的常用因素
    用户的任何一种属性都可作为访问控制决策因素
    常见用户属性
        用户ID/用户组ID
        用户访问许可级别
        角色
        权能列表
客体属性
    与系统内客体相关联的属性，也是访问控制策略的一部分
    常见属性
        敏感型标记、范畴
        属主

访问控制：限制已授权用户、程序、进程或网络中其他系统访问本系统资源的过程。
任务
    授权：确定可给予哪些主体访问客体的权利
    确定访问权限
    实施访问权限

访问控制分类
自主访问控制（Discretionary Access Control）
属主利益
强制访问控制（Mandatory Access Control）
组织利益
有些访问控制模型是中性的
如：RBAC访问控制-基本原理

自主访问控制
一个用户可自主规定系统中哪些用户可以以何种方式
访问它所拥有的系统资源
用户也可自主的将访问权或访问权子集授予其它主体
问题：
信息在被处理的过程中，安全属性的变化可能不受属主的控制
属主本身行为可以与系统整体安全目标不一致

访问控制矩阵
每行表示一个主体
每列表示一个受保护客体
矩阵中的元素表示主体可以
对客体的访问模式
矩阵通常是稀疏矩阵

访问控制-基本原理
CAPABILITYList
对应于访问矩阵的每一行
与一个主体体相对应

访问控制-基本原理
基于列的访问控制——9bit
控制
针对客体的属主、客体的组对应的主体、其他所有主体
定义读、写、执行的权限
客体的所有权只能由超级用户改变
属主是唯一能改变客体保护位的主体
控制粒度有限

访问控制-基本原理
访问控制列表（ACL）
对应于访问矩阵的每一列
与一个客体相对应

访问控制-基本原理
CAPABILITYList
与ACL的比较
CAPABILITYList
权限定义保存在主体端
访问权限易于传递
访问权限不易回收
ACL
权限定义保存在客体端
访问权限不易传递
访问权限易于回收

访问控制-基本原理
强制访问控制（MAC）
原理
有一套事先定义的主体、客体安全标签的集合（如密级和范畴）
有一套根据主体、客体安全标签实施访问控制的规则
根据安全策略为主体、客体设置安全标签，从而实施访问控制
特点
策略是针对安全属性定义的
安全属性只能由安全系统严格按照规则设置
用户没有改变自己标签的权限
访问控制模型
关注机密性：BLP
关注完整性：Biba/Clark-Wilson
关注于工作任务：RBAC
关注于最小特权：SELinuxTE2015/9/2

访问控制-实现中的问题
访问控制裁决与策略定义的分离
策略的灵活性
访问控制策略的保存
全局存储
主体端存储
客体端存储
访问控制的实施
访问许可的裁决：
在操作发生之前，防止TOCTOU攻击
系统向主体隐藏不可进行的操作及不可访问的客体
客体的实例化
信息的加密存储

访问控制-实现中的问题
可信主体的存在及限制
有哪些
实施访问控制仲裁的主体
管理安全策略的主体
管理主客体安全标签的主体
需要做什么
超越访问控制策略
最小特权加以限制（权限最小化、作用范围最小化）
注意
天外有天，可信主体的限制不可能完全通过技术方法实现

访问控制-实现中的问题
缺省策略、缺省属性的定义
定义原则：限制优先的原则
安全属性的继承
创建客体的主体的安全属性
客体所在客体容器的安全属性（目录）
多种访问控制机制的并存
产生的原因
系统存在来自各方的访问控制需求：系统的、用户自身的
访问控制机制往往根据单一的安全模型设计，单一模型无法达成全部访问控制目标
解决办法
定义综合裁决机制
定义超越机制
限制实施范围2015/9/2

访问控制-实现中的问题
各层次主体客体的协同控制
情况举例
应用系统与操作系统协同
操作系统与网络协同
需考虑的问题
做好主体、客体及其安全属性间的正确映射
确定裁决需求产生的层次
•上层利用下层机制
•对应层次实施策略
•下层提供合理的隔离措施或管道
2015/9/2

访问控制-实现中的问题
访问控制机制的自身保护
什么需要保护
访问控制实施机制
安全策略数据
安全属性定义数据
保护需求：保护其完整性
保护方法
自己保护自己
借助底层机制、离线管理规则保护
2015/9/2

访问控制-技术发展
新的访问控制需求
保护的目标：CIA、隐私保护
来自各方的访问控制需求
组织安全策略、网络提供商安全需求、系统提供者安全需求、系统属主安全需求
环境因素影响访问控制决策因素
时间、空间、能耗、系统安全状态。。。
访问控制决策
允许、拒绝、权利、义务
越来越多的威胁
访问控制实施机制
可信计算——封装存储
安全容器——无论你是好是坏，隔离处理
2015/9/2

访问控制-技术发展
问题：
需求的日益多样，访问控制策略语言日趋复杂，用户
如何使用？
通用机制？
专用机制？
现实世界如何解决相关问题？

典型安全机制介绍
标识与鉴别
访问控制
安全审计
其它

安全审计-要解决的问题
需要对安全相关事件进行记录
为安全相关纠纷的仲裁提供证据
支持事故发生前的预警
在关键安全事件发生时进行应急响应

安全审计-基本概念
安全审计：
对系统中的安全相关事件进行记录、检查及审核的机
制
审计事件
待审计的可区分、可识别、可标志用户行为、可记录
的审计单位
审计记录
记录一条审计事件的数据，一般包括：事件发生的时
间、参与事件的实体、标识事件的参数、事件发生的
结果
审计日志
指系统中产生的审计记录的集合

安全审计——基本原理
需记录的审计事件：安全相关事件
注册事件：系统外部事件
标识与鉴别事件
使用系统事件：系统内部事件
启动进程、创建客体、删除客体
可信主体发生的动作
利用隐蔽通道的事件

安全审计——基本原理
审计事件的记录
从事件开始到结束
记录事件发生的安全相关信息
发生时间
主体信息、客体信息（名称、属性）
事件参数：事件分类、操作名称、输入输出参数
环境上下文（访问通道等）
事件结果
记录的过程
产生、缓存、存储、归档

安全审计——基本原理
审计事件的记录
从事件开始到结束
记录事件发生的安全相关信息
发生时间
主体信息、客体信息（名称、属性）
事件参数：事件分类、操作名称、输入输出参数
环境上下文（访问通道等）
事件结果
记录的过程
缓存：内存
存储：文件
归档：备份介质或远程服务器

安全审计——基本原理
审计策略的定义
事前过滤规则
审计存在系统开销
定义实际记录的事件
事后查看过滤
从众多事件中挑选目标事件进行分析
审计日志的归档策略
本地存储审计日志文件的归档规则：
•文件轮转规则
•轮转文件数
•文件备份归档间隔
审计日志缓存策略：内存不足、空间不足时如何处理
记录丢弃、停止服务、报警。。。。

安全审计——基本原理
审计日志的处理
在线分析
异常行为分析、报警
关键安全事件在线监测、报警
离线分析
逐条分析系统中发生的安全事件、监控可信主体行为
多条信息的关联分析
•可能是针对一个事件的多条记录
•也可能是有因果关系的多个事件的序列分析

安全审计——实现中的具体问题
审计点的选取
记录在通用框架上？
可扩展性，分类较粗
记录在专门实现上？
记录的信息针对性、时效性较好，分类较细
记录什么样的信息
主客体标识信息
节省空间，后续用户可读信息的解析可能无法完成
用户可读名字信息
浪费空间，实体的唯一标识性不好，分类查找困难
审计日志保存空间的维护
审计机制自身的可用性保护
采用预警机制防止审计机制不可用

安全审计——实现中的具体问题
审计系统的保护
审计服务、审计策略
完整性保护
审计日志
完整性保护
防止对手破坏证据

安全审计——新发展
大数据分析时代的审计日志处理
深度学习
半自动化分析安全威胁
主动学习调整安全策略

典型安全机制介绍
标识与鉴别
访问控制
安全审计
其它

其他机制-可信路径
安全需求
用户是通过安全边界外的中间应用层与操作系统进行
交互的
但是用户登录、管理员管理等操作属于关键性的安全
操作
用户必须能够确认与TCB进行交互，而不是与特洛伊
木马交互
什么是可信路径
能保证终端用户直接与TCB进行通讯的机制
只能由用户或TCB发起，不能被不可信软件模拟。

其他机制-可信路径
Linux系统下可信路径的实现
安全注意键（SAK）机制，ALT+SysRQ+k
原理：
选择用户正常访问系统不会使用的按键序列
包含在TCB中的内核对按键序列触发事件进行响应
查找用户使用的终端
自身或通知用户态核心可信程序（如Init）准备好用户独占的访问交互终端
拒绝其他主体对终端的读写访问
完成身份鉴别或其他安全敏感操作

其他机制-可信路径
远程可信路径
经过的过程
远端系统
传输网络
本地服务系统
安全保护需求
远程平台的证实：
•可信计算
交互过程及内容的机密性、完整性保护：
•基于密码网络传输保护机制

移动智能终端的安全问题
1

移动智能终端安全研讨问题（一）
移动智能终端包括哪些设备？使用“威胁模型”分析这些
设备的安全问题。
调研当前移动智能终端存在哪些安全风险，以及这些安全
风险会对用户或设备造成哪些不良后果？试举一到两例说
明。
从软硬件不同角度（芯片、操作系统、应用软件、用户数
据及外围接口等方面）分析上述安全风险存在的原因，调
研移动智能终端已有的安全防护技术或策略？

移动智能终端的类别
智能手机
iPhone
安卓手机
Windows Phone
PDA智能终端
rfid读写器
POS机
平板电脑
iPad
车载智能终端便携式电脑
笔记本
可穿戴设备
iWatch
Google Glass

移动智能终端的安全风险
应用安全威胁
恶意软件
木马病毒
操作系统安全威胁
系统漏洞和后门越狱漏洞安卓Stagefright漏洞
硬件安全威胁
设备丢失
无线攻击WiFi攻击
新型终端安全威胁
车载终端劫持克莱斯勒召回事件
可穿戴设备攻击远控医疗设备杀人（胰岛注释泵）

移动智能终端安全风险的后果
隐私窃取
浏览通讯录“随身翻译器”
获取位置信息
获取照片等本地数据
截获账号密码
资费损失
短信资费“僵尸相册”
流量资费
话费
功能损耗
缓冲区溢出CVE-2015-3842
消耗电能

安全漏洞以及安全技术相关网站
http://www.wooyun.org/
http://www.cnnvd.org.cn/
http://www.freebuf.com/
https://www.blackhat.com/

移动智能终端的安全技术
移动智能终端安全主要包括五个方面：
应用软件安全
操作系统安全
硬件安全
外围接口安全
用户数据安全

移动智能终端的安全技术——应用软件安全
风险分析
缺乏对应用软件的审核机制，攻击者很容易把病毒、木马、
蠕虫等恶意代码植入到应用软件中。
安全目标
应用软件安装时，要能确定其来源；
对已经安装的应用软件，要能进行敏感行为的控制。
防护技术
应用软件认证签名机制
敏感API 管控技术

移动智能终端的安全技术——操作系统安全
风险分析
操作系统作为一类软件，不可避免存在已知或未知的系统安
全漏洞，提供的API接口和开发工具包也存在被滥用风险；
可能预留的系统后门用于收集用户信息等。
安全目标
对操作系统漏洞进行及时修复，并监控系统资源的调用。
防护技术
安全调用控制
操作系统的更新

移动智能终端的安全技术——硬件安全
风险分析
通信电波被窃取、智能芯片可能被植入恶意程序。
安全目标
确保芯片内系统程序、终端参数及数据不被篡改或窃取。
防护技术
移动终端基带芯片调试端口的安全
移动终端芯片的安全访问
移动终端基带芯片一致性的安全
加密单元的安全

移动智能终端的安全技术——外围接口安全
风险分析
蓝牙、WiFi、NFC 、USB等外围接口可能被非法连通，造
成私密信息的泄露，还可能造成恶意代码的传播。
安全目标
确保用户对外围接口的连接和数据传输可知、可控。
防护技术
无线外围接口
开启/ 关闭受控机制、连接建立的确认机制、连接状态标识、数据
传输的受控机制
有线外围接口
连接建立的确认机制和U盘模式的安全机制

移动智能终端的安全技术——用户数据安全
风险分析
大量用户隐私数据一旦泄露，会给用户造成巨大损失。
安全目标
保证用户数据的安全存储，并备份保证用户数据的恢复。
防护技术
移动智能终端的授权访问（开机密码和锁屏密码）
用户数据的加密存储
用户数据的彻底删除（改变数据区内实际存储数据）
用户数据的远程保护（远程控制智能终端）
用户数据的转移备份

调研分析当前移动智能终端主流操作系统使用的安全机制
（Android或iOS任选其一分析），并与传统PC端操作系
统中常用的安全机制比较有何不同？
分析当前移动智能终端主流操作系统存在的安全缺陷，以
及这些缺陷可能造成的威胁（Android或iOS任选其一分
析）？调研当前有哪些方案可以弥补或解决这些缺陷，举
一个实例具体说明。移动智能终端安全研讨问题(二)

Android安全机制
14
14

Android安全机制——Linux内核
15POSIXUser
POSIX 表示可移植操作系统接口，POSIX标准是IEEE为要在各
种Unix操作系统上运行的软件而定义API的一系列标准的总称。
应用程序安装时，Android会赋予其唯一的ID，系统为应用下的
文件设置正确的权限，只有属于该应用的ID才可以允许访问。
系统为应用程序创建沙箱保证，应用程序都有自己独立的进程
，拥有固定的权限，从而通过实现程序间的隔离和权限，保障
系统安全。
文件访问控制
Android的文件访问控制应用了Linux的ACL权限控制机制。存放
在Android存储器的访问策略文件列出了手机的文件访问策略，
用户可以根据自身要予以定制，允许只读或可读写等。
15

Android安全机制——Android本地库及运行环境
16内存管理单元
Android系统在某进程活动停止后不会将进程结束，而是存入内存，加
快了再次使用进程的启动速度。
每个进程都有自己单独的虚拟内存空间，且只能访问被分配的内存，
不能访问其他进程的内存。
强类型安全语言
类型安全即要求类的指针“确实”指向类的一个对象，为防止错误地
使用变量，变量在赋值时会强制其符合声明的类型。
Java具备类型安全的特性，是强类型语言，是由严格的编译期类型检
查、对数组边界检查、自动的存储管理三种机制保证的。
AAA服务器
在
Android操作系统中，用户要访问网络资源首先要进行入网认证，
认
证通过才可访问网络资源。16

Android安全机制——应用程序框架
17应用程序权限控制
权限控制是对应用程序的访问等操作加以限制，是应用程序安全的核
心。通过应用程序权限控制，可有效防止程序恶意操作、非法控制、
窃取关键数等安全问题。
组件封装
应用程序把其组件包装在程序内容内，通过定义组件的“exported”
属性来限制或允许其他应用程序访问，保证应用程序的运行。
签名机制
数字证书用来标识应用程序的作者和应用程序之间建立信任关系，所
有应用程序都被要求数字签名认证。Android程序包使用的数字证书
可以是自签名的，不需要权威的数字证书机构签名认证，如要正式发
布
Android应用程序，必须使用合适的私钥生成的数字证书来给程序
签名。
17

iOS安全机制
18安全启动链
启动过程的每一步都包含被苹果公司密码签名以确保完整性的组件，
只有验证了信任链才会继续，包括引导装载程序、内核、内核扩展和基带固件。
当设备打开后，应用处理器会立即从引导芯片执行代码，这些不可变的代码在芯片制造时就被设定好并且默认可信。Bootrom的代码包含
苹果根CA公钥，用于验证LLB加载程序在装载前是否被授权。当LLB
加载程序完成它的任务后，它将会核实并运行下一阶段的引导加载程序iBoot，依次轮流核实并运行iOS内核。
18

iOS安全机制
19应用代码签名
为确保所有应用程序的来源可知且经过认证和未被修改，iOS需
要所有可执行代码被苹果发布的证书签名。
自带的程序有Safari、Mail，第三方软件需经过苹果公司的证书认证。强制性的代码签名把iOS的信任链延伸到应用程序，阻止了第三方软件加
载未签名代码资源或使用自修改的代码。
地址空间布局随机化
此技术作用在于防御缓冲区溢出攻击。
通过对堆、栈等线性区的随机化布局，使得攻击者对各区域基地址的预测
难度大增，从而防止了攻击者对攻击代码的直接定位。即便攻击代码被执
行，也会因不能找到合法的返回地址而进程停止。
19

iOS安全机制
20沙盒技术
iOS应用程序只能在与自身程序密切关联或为该程序创建的文件
系统中读取信息，不可访问其它区域。
沙盒是由用户控件库函数、内核扩展、服务器构成，用户控件库
函数是用来初始化和配置沙盒的。
数据保护
iOS通过硬件加密来保护系统和用户数据，通过构建和管理关键
字层级来实现
数据保护技术允许设备在不解密敏感数据前提下响应一些事件
。
20

移动操作系统的安全机制
21移动OS从PC端OS继承的安全机制
标识与鉴别
身份鉴别、口令设置、重鉴别、鉴别失败的机制等
传统访问控制
文件访问控制
数据加密机制
iOS的硬件加密

移动操作系统的安全机制
22移动OS基于传统OS安全机制派生的安全机制
基于许可的访问控制
应用程序权限控制、组件封装等
隔离机制
沙箱机制
应用的来源控制机制
Android应用数字证书、iOS的应用代码签名
新型内存管理机制
Android的内存管理单元、iOS的地址空间布局随机化

移动操作系统的安全缺陷
23Android的缺陷
权限机制不够细化
应用权限是在安装时授予的，一旦同意安装程序访问权限则固定，不
能根据具体情况，在不同的时间段灵活设置，也会随时对系统、数据
造成安全隐患
系统漏洞
开源OS存在大量系统漏洞利用系统漏洞开发大量病毒，恶意代码等
应用程序缺乏认证和监管
Android平台缺乏严格的开发者认证和应用程序发布审核机制，应用程
序来源多样，开发者可以匿名发布恶意软件供用户下载使用
获取root权限
被root后的系统极易被恶意代码或病毒攻击，遭受隐私窃取和破坏设备不再享受厂商售后服务

移动操作系统的安全缺陷
24iOS的缺陷
系统漏洞
主要是通过漏洞进行越狱
越狱
用户更加容易受到恶意软件的影响，同时恶意软件也可以获得最高
权限，从而对系统进行全面的控制，窃取用户隐私和数据

移动操作系统的缺陷解决方案
25应用防护软件
杀毒软件，如360
对新病毒存在一定滞后软件本身有漏洞，可以被病毒绕过
操作系统防护
系统补丁或升级
安全增强系统，如SE Android
依旧存在漏洞缺陷
安全硬件防护
安全芯片，如TPM或者SE
其他物理的攻击无法防护，如通过触屏攻击

移动终端可信执行环境
26要全面解决现有安全问题需要建立一套完全
独立于现有操作系统的“安全运行环境”

移动终端可信环境
移动终端可信环境
移动终端可信环境是存在于移动终端内，通过混合使用硬件
和软件的方法在物理上隔离出两个平行的执行环境：普通的
非保密执行环境和安全的保密环境。
富执行环境（REE）
非保密执行环境被称为富执行环境（REE）。它是针对多功
能性和丰富性创建的环境，并执行移动终端操作系统，在设
备生产后向第三方开放下载。
27

可信执行环境定义
可信执行环境（TEE）
可信执行环境是存在于移动终端设备内，与REE环境相分离
的安全区域；
具体实现可以是主处理器的一种安全模式，也可以是与主处
理器相隔离的协处理器；
它与REE环境以及REE环境上面的应用相分离，确保各种敏
感数据在一个可信环境中被存储、处理和受到保护；
同时在可信执行环境上装载着可信应用TA，可信执行环境
为这些可信应用提供一个安全的执行环境。
28

可信执行环境提供的安全服务
TEE需要实现的安全服务包括
执行的完整性验证
与REE环境内的客户端应用（CA）的安全通信
可信存储
与外界安全用户的输入/输出
密钥和加密算法管理
29

移动终端可信环境软件架构
30

移动终端可信环境软件架构
REE软件部件包含：
客户端应用CA；
TEE Functional API，可以支持部分
TEE服务如加密或安全存储，可以被
Rich OS的应用开发者访问使用；
TEE Client API，能够让CA访问或
者与TA交互数据；
富指令操作系统组件(Rich OS 
Components）：
TEE Client API；公共设备驱动：提供外设驱动；REE 通信代理（REE Communication 
Agent）：为TA和CA提供一个安全的通
信通道
31

移动终端可信环境软件架构
TEE软件部件包含：
可信应用TA，运行在TEE内；
TA相应的TEE Internal API，使TA能
够访问TEE内的通用的安全功能；
可信的操作系统部件（Trusted OS 
Components），主要包括：
可信核心框架(Trusted Core Framework)：
为TA提供类似操作系统的功能;可信功能(Trusted Functions)：为应用开
发者提供支持能力；TEE 通信代理(TEE Communication 
Agent)：为TA和CA提供一个安全的通信
通道；可信内核(Trusted Kernel)：提供相关可
信外设的驱动。
32

可信执行环境应用领域
金融/支付/电子商务
借助于TEE的可信UI特性，TEE可以
提供用户认证、交易确认和交易处理
等方面的保护。
数字版权保护（DRM）
利用TA来存储密钥，凭据和证书；执
行关键软件；执行关键的内容保护函数和
/或安全地委托给SE。
政府/企业应用
公司应用，如email管理器可以依赖
于
TA，实现敏感功能如加密存储和
email的访问控制。
个人隐私保护
TEE的数据加密、安全存储、系统保
护等安全能力都可以为个人隐私数据
提供安全保护服务。33

34指纹传感器
某宝
服务端6  签名
/秘钥管理
/校验
某宝指纹支付流程图
Trust Zone
Pay App
Android-Normal WorldTEE-Secure World
1用户指纹采集5 签名加密及校验对比
Pay App
安全模块
安全模块安全模块
安全模块
安全服务LIB
2 提取特征值
/校验
Manufacturer Wrapped TEE Client APIManufacturer WrappedTEE internal API3 特征值本地存储
4 校验结果加密传输存储模块

谢谢！&问答



