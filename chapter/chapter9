Linux平台下的输入方式
键盘输入
熟悉键盘布局
非键盘输入（自动输入）
手写输入
通过笔尖或指尖
实时识别
扫描输入
基于图像像素
语音输入

授课内容
授课内容
第1讲Linux手写输入法
第2讲手写输入技术
第3讲扫描输入技术

《
《操作系统定制技术
操作系统定制技术》
》
第二部分
第二部分中文信息处理
中文信息处理
第九章
第九章手写
手写&
&扫描输入技术
扫描输入技术
第
第1
1讲
讲Linux
Linux手写输入法
手写输入法
主讲人：马龙龙
2015年11月18日

5

Linux
Linux手写输入法
手写输入法
一般由三部分组成
界面（GUI）
接收手写轨迹信息、显示手写字形和识别结果、其它
功能按钮
引擎（Engine）
手写轨迹信息传给引擎，获取前N个最好的匹配（输出）
结果
模型文件（Model）
手写输入法支持的每一种文字对应一个模型文件
模板/
词典（template/dictionary)
每一个输入法可以包括多个模型文件
6
第
第2
2讲详细讲解
讲详细讲解

Linux
Linux常见手写输入法介绍
常见手写输入法介绍
Fctix-handwriting
TegakiProject
Tomoe
CellWriter
Ibus-handwrite
其它
7

Fctix
Fctix-
-handwriting
handwriting简介
简介
Fcitx
的输入法之一。
Fcitx
（[ˈfaɪtɪks]，源自“Free Chinese Input Toy for X”，
现英文全称“Flexible Input Method Framework”，中文
名称为“小企鹅输入法”）是一个在X Window
中使
用的输入法框架。
Fcitx
是一个以GPL方式发布的、基于XIM的简体中文
输入法集合，包括手写、五笔、五笔拼音、二笔、仓
颉、晚风、冰蟾全息、拼音(全拼和双拼)、区位以及
码表输入模块。
可以在Linux
、FreeBSD中运行。
8

Fctix
Fctix-
-handwriting
handwriting简介
简介
Fcitx支持的输入法引擎（12个）：
fcitx-anthy: 使用Anthy引擎的日文输入法
fcitx-chewing:libchewing的支持（新酷音输入法）
fcitx-cloudpinyin: 为所有拼音引擎提供云拼音支持
fcitx-googlepinyin: 移植自Android的Google拼音支持
fcitx-handwriting: Zinnia作为后端的手写支持
fcitx-keyboard: 采用系统键盘布局作为输入法，以及提供拼写检
查
fcitx-libpinyin:libpinyin为后端的汉语拼音支持
fcitx-m17n: 使用m17n-db的多语言输入法
fcitx-mozc: 使用mozc引擎的日文输入法
fcitx-pinyin:汉语拼音支持
fcitx-sunpinyin:Sunpinyin为后端的汉语拼音支持
fcitx-table: 码表类输入法支持，如五笔、郑码等9

Fctix
Fctix-
-handwriting
handwriting简介
简介
采用GTK
界面和dubs通信机制
采用zinnia识别引擎
打开命令行模式，输入fcitx-handwriting或
fctixhandwriting即可运行
10

Fcitx
Fcitx-
-handwriting
handwriting使用
使用
功能介绍
界面左侧：ABC键可以切换成输出英文字符，123.,键可以切
换成输出数字和常见符号，上页、下页键可以查看更多候选相似汉字。
界面中间：画板可以用鼠标写字，右击鼠标不放可以拖动窗口。
界面右侧：删除、空格、回车是使用在文本输出的常见输出，关闭键则是关闭程序。

Fcitx
Fcitx-
-handwriting
handwriting使用
使用
中文手写
英文输出

Fcitx
Fcitx-
-handwriting
handwriting使用
使用
数字或符号输出

Fcitx
Fcitx-
-handwriting
handwriting框架
框架
三大模块
fcitx-handwriting （界面）
zinnia识别引擎（引擎）
Zinnia-tomoe（模型文件）
架构
前端界面
前端界面
Zinnia
Zinnia识别引
识别引
擎
擎
Zinnia
Zinnia-
-tomoe
tomoe
model
model

模块介绍
模块介绍
Fctix-handwriting前端
前端接受用户的指令选择相应的模式（如中文，字符）、输出（空格，换行）、关闭。
前端主要是接收用户在画板上写下的字迹，并提交给zinnia引擎处理。
同时前端将zinnia引擎处理的结果展示给用户。
Zinnia 引擎
读取模型文件的信息。
将前端传来的字符信息进行归一化处理，特征提取等处理，再通过和zinnia model的样本进行匹对找出相似度最大的候选字符集
。
将处理的结果反馈给前端。
Zinnia 模型文件
支持特定类别字符的识别词典。

Fcitx
Fcitx-
-handwriting
handwriting安装
安装
提供两种方式
Deb包安装
源代码包安装
安装过程
需要安装zinnia，zinnia-tomoe和fcitx-handwriting。
安装顺序
zinnia
zinnia-tomoe
fcitx-handwriting

Fcitx
Fcitx-
-handwriting
handwriting安装
安装
Deb包安装
Deb是一种支持在linux一键安装的软件包。
只要点击图标即可按照提示一步一步安装完成，十分方便。
所需Deb包

预安装依赖包
预安装依赖包
预安装依赖包
sudoapt-get install libx11-dev
sudoapt-get install fcitx-libs-dev 
sudoapt-get install gtk
+-2.0
sudoapt-get install libdbus-1-dev
sudoapt-get install libdbus-glib-1-dev
sudoapt-get install libxtst-dev
sudoapt-get install intltool. 
重启

zinnia
zinnia安装
安装

Zinnia
Zinnia-
-tomoe
tomoe和
和fcitx
fcitx-
-handwriting
handwriting安装
安装

Fcitx
Fcitx-
-handwriting
handwriting运行
运行

Fcitx
Fcitx-
-handwriting
handwriting源码
源码安装
安装
Fctix-handwriting源码安装
安装顺序（1）zinnia（2）zinnia-tomoe（3）fcitx-
handwriting
Fctix-handwriting源码安装包

预安装依赖包
预安装依赖包
预安装依赖包
sudoapt-get install libx11-dev
sudoapt-get install fcitx-libs-dev 
sudoapt-get install gtk
+-2.0
sudoapt-get install libdbus-1-dev
sudoapt-get install libdbus-glib-1-dev
sudoapt-get install libxtst-dev
sudoapt-get install intltool. 
重启

zinnia
zinnia安装
安装
Zinnia源码安装
tar 
–zxvfzinnia-xxx.tar.gz
解压zinnia的压缩包
cd zinnia-xxx
进入zinnia-xxx解压包
./configure
make
sudomake install

zinnia
zinnia安装
安装
安装zinnia成功的文件

Zinnia
Zinnia-
-tomoe
tomoe安装
安装
zinnia-tomoe源码安装
tar 
–zxvfzinnia-tomoe-xxx.tar.gz
解压zinnia-tomoe压缩包
cd zinnia-tomoe-xxx
进入zinnia-tomoe-xxx解压包
./
configure  --prefix=/
usr
指定安装目录
make
sudomake install

Zinnia
Zinnia-
-tomoe
tomoe安装
安装
Zinnia-tomoe安装后系统拥有的字典文件

Fcitx
Fcitx-
-handwriting
handwriting安装
安装
Fcitx-handwriting 源码安装
sudoapt-get install cmake
先安装cmake
tar 
–zxvffcitx-handwriting-xxx.tar.gz
解压fcitx-handwriting-xxx压缩包
cd fcitx-handwriting-xxx
进入fcitx-handwriting-xxx解压包
建立build文件夹（采用cmake外部编译方式）
（如果build已存在，则先删除build目录。
sudorm–r build.）

Fcitx
Fcitx-
-handwriting
handwriting安装
安装
Fcitx-handwriting 源码安装( 续)
mkdirbuild（得到一个新的空的build文件夹）
cd build
进入build目录
cmake.. 
make
sudomake install

运行
运行fcitx
fcitx-
-handwritig
handwritig
运行fcitx-handwritig

Tegaki
TegakiProject
Project
Open-Source Chinese and Japanese Handwriting Recognition
特点
界面设计参考fcitx-handwriting
支持多平台: Linux、windows、Mac os
汉字（简繁体）、日文
两种识别引擎：Zinnia
、Wagomu
支持PC和移动设备

Tegaki
TegakiProject
Project
2009年2月11日发布0.1版本
最新版本
界面
界面GUI
GUI
引擎
引擎E
Engine
ngine

Tegaki
TegakiProject
Project
模型文件（Model）

Tegaki
TegakiProject
Project
主要模块
Tegaki-recognize  识别（分类）主程序
smart 模式：支持连续书写
Simple模式：支持简单书写
Tegaki-train  管理字符样本的编辑和训练
用户界面允许选择/添加字符类别和对应字符样本
界面左侧：字符类别，界面右侧：字符样本
Recognition-engine  识别引擎
两种引擎：Zinnia、wagomu
训练和识别

Tegaki
TegakiProject
Project
主要模块
Tegaki-tools：面向高级用户和开发人员
tegaki-convert 字符样本集的转换、过滤、合并等
tegaki-build 从1个或多个字符样本集构造模型
tegaki-eval不同字符样本集的性能评价
tegaki-render 转换字符样本为图像或视频，目前支持格式包括
PNG
、PDF、SVG
、GIF
Scim-tegaki: 与SCIM（多语言输入方法）的集成
Ibus-tegaki: 与Ibus的集成
基础库：
tegaki-python: base Python library
tegaki-pygtk: base user interface library

Tegaki
TegakiProject
Project
源码简单分析
核心模块：识别、手写输入界面是c++版的fctix-
handwriting对应的python
Wagomu：基于DTW的简单的识别引擎
识别精度不高
提供c++和python两种版本
其它模块用python实现

Tomoe
Tomoe
全称TegakiOnline Moji recognition Engine
“Tegaki” means “handwriting” Moji menas“letter”
2015年8月5日更新最新版本
tomoe-0.6.0
支持中文、日文
扩展到其它文字

Tomoe
Tomoe
主要模块及库
识别引擎库
支持日文1级字符集、部分类别汉字
用户界面库
User interface widget library
提供识别候选列表显示
SCIM输入法模块
多语言输入方法库，通过该模块将识别传送到应用中
Uim模块
多语言输入方法库的帮助

CellWriter
CellWriter
基于格子的手写输入
Writer-dependent
多种语言支持
集成识别和训练模块在一个界面

CellWriter
CellWriter
优点
用户可以根据自己需要，设定手写类别
用户可参与训练
缺点
由于训练样本的有限性，模型的扩展性不好
算法不一定保证适用于多种语言

Ibus
Ibus-
-handwrite
handwrite
IBus（英文全称为Intelligent Input Bus），是GNU/Linux和类
UNIX操作系统下的以GPL协议分发源代码的开源免费多语
言输入法框架

Ibus
Ibus-
-handwrite
handwrite
由微软的蔡万昭（网络名称）开发
支持中文简繁以及日文
2套识别引擎
早期使用的引擎来自http://zinnia.sourceforge.net/
改开发新引擎名字暂定为lucykila引擎原理见源码
README 
可以在使用的过程中动态切换引擎
日文输入法只能使用zinnia 引擎

Ibus
Ibus-
-handwrite
handwrite手写输入
手写输入
源码分析
最新版本2.1.4（2011）, 下载版本1.2.0（2010)

其它
其它
汉王
最早2004年，与红旗合作
华南理工大学金连文研究组
SCUT gPen SDK for Linux
Ink2Text Handwriting Recognition System
MyScriptStylus
SHIP
Stylus/Handwriting Input Panel Project

目录
目录
手写输入的应用
如何实现？
采用文字识别领域的方法
手写识别的基本过程
单个字符识别
字符串识别
实例：手写数学公式输入及识别
手写样本数据的采集方式
手写板
Anoto数字笔
性能状况

手写输入的应用
手写输入的应用

手写输入的应用
手写输入的应用
支持任意方向的手写输入
网页版的手写输入

支持手写输入的
支持手写输入的现状
现状
支持语言
中文
日文汉字\日文假名
韩文
拉丁文
阿拉伯文字符
泰文
希腊文
数字、标点、符号
少数民族目前仅支持藏文
。。。
支持输入粒度
单个字符
词语
短字符串
长字符串

如何实现？？
如何实现？？
移动设备获取手写的轨迹信息
点的坐标序列
点的时间顺序和手写的先后顺序对应
下笔和抬笔区分笔划的开始和结束
如何实现
实际应用通常给出多个候选识别结果
偻(507B)
逐年增多
(9010  5E74  589E  591A)

如何实现？？
如何实现？？
手写
手写
输入法
输入法
的识别
的识别
引擎
引擎
文字
文字
识别领域
识别领域
的技术
的技术
和
和方法
方法
借助于
借助于

手写识别的基本过程
手写识别的基本过程
单个字符识别
预处理
特征提取
分类
字符串识别

单个字符识别的一般过程
单个字符识别的一般过程
识别过程
性能指标
识别准确度
识别时间
识别词典

字符预处理
字符预处理

归一化中的坐标变换
归一化中的坐标变换

归一化效果实例
归一化效果实例

特征提取：结构方法
特征提取：结构方法

特征提取：统计方法
特征提取：统计方法
轮廓
轮廓
梯度
梯度

字符分类
字符分类

最近距离分类器
最近距离分类器
每类训练样本的平均特征值作为模板
距离最近的作为样本的分类（识别）结果
距离度量
欧式距离
城市区块距离(City Block Distance)
马氏距离

支持连续输入的手写识别过程
支持连续输入的手写识别过程
长/短字符串

支持连续输入的手写识别过程
支持连续输入的手写识别过程

语言后处理
语言后处理

识别错误例子

实例：手写数学公式输入及识别
实例：手写数学公式输入及识别

实例：手写数学公式输入及识别
实例：手写数学公式输入及识别

实例：手写数学公式输入及识别
实例：手写数学公式输入及识别
结构分析

实例：手写数学公式输入及识别
实例：手写数学公式输入及识别
符号集

实例：手写数学公式输入及识别
实例：手写数学公式输入及识别
公式类型

实例：手写数学公式输入及识别
实例：手写数学公式输入及识别
输出方式

手写样本的采集方法
手写样本的采集方法
手写板

手写板
手写板
点轨迹存储格式（一个字符）

手写板
手写板
根据手写的点轨迹序列绘制的字符显示

手写板
手写板
采集方式优点
不需要标定
采集方式缺点
用户书写需要适应
与传统的纸笔方式的书写有偏差
只支持单个字符的采集，不支持字符串、文档

手写样本的采集方式
手写样本的采集方式
Anoto数字笔
完全按照自然书写习惯
可在纸张书写，并在纸面和电脑上
同时留下笔迹
仅支持点阵的电子模板

Anoto
Anoto数字笔
数字笔
笔迹信息和显示

Anoto
Anoto数字笔
数字笔
一页的笔迹的点序列对应一页的unicode码序列，
目标：每个字的笔迹与码对应
标定工具

藏文手写输入法
藏文手写输入法
PC版
手机安卓版

性能：联机手写汉字识别

目录
目录
扫描输入的应用
如何实现？？
采用文字识别领域的方法
基本识别过程
实例
邮政地址识别
与中华字库工程相关
性能状况
文字识别领域简介

扫描输入的应用
扫描输入的应用

百度翻译

百度-涂书笔记

如何实现？？
如何实现？？
输入：图像像素
灰度图像
彩色图像
二值化图像

如何实现？？
如何实现？？
手写
手写
输入法
输入法
的识别
的识别
引擎
引擎
文字
文字
识别领域
识别领域
的技术
的技术
和
和方法
方法
借助于
借助于

扫描输入的识别过程
扫描输入的识别过程

图像预处理
图像预处理

字符切分
字符切分

单个字符的识别
单个字符的识别
与手写输入的单个字符的识别过程相同
手写输入比扫描输入的单个字符识别精度更高
手写包含结构信息：笔划信息、点信息
扫描输入是静态的图像信息
识别过程的各个阶段采用的方法也可能不一样

实例：邮政地址识别
实例：邮政地址识别

识别例子：邮政地址识别
识别例子：邮政地址识别
倾斜校正

实例：邮政地址识别
实例：邮政地址识别
版面分析

实例：邮政地址识别
实例：邮政地址识别
邮编提取

实例：邮政地址识别
实例：邮政地址识别
粘连分割识别

实例：邮政地址识别
实例：邮政地址识别
后处理

实例：与中华字库工程
实例：与中华字库工程相关
相关
2包：版刻印刷文字数据采集系统

实例：与中华字库工程相关
实例：与中华字库工程相关
2包：版刻印刷文字数据采集系统

实例：与中华字库工程相关
实例：与中华字库工程相关
2包：版刻印刷文字数据采集系统
版刻印刷文字特点
版面结构相对简单
字形相对稳定
现有的文字识别技术足以满足版刻文字识别精度
识别难点
字图的清晰度不够
字图的部分笔划缺失
现有的技术未能完全解决该难点

实例：与中华字库工程相关
实例：与中华字库工程相关
2包：非规范文字数据采集系统

实例：与中华字库工程相关
实例：与中华字库工程相关
2包：非规范文字数据采集系统
与版刻相比，非规划文字数据采集难点
版面结构复杂且多样化
图像的噪声大
笔划缺失信息严重
可利用的先验知识少
理论上，仍应采用版刻文字的识别流程
不同类的文字数据，应采用不同的算法
更适合半自动化、人机交互的切分界面

实例：与中华字库工程相关
实例：与中华字库工程相关
26包：外字与中间字排重工具

实例：与中华字库工程相关
实例：与中华字库工程相关
26包：外字与中间字排重工具
处理对象：单个字图
与传统扫描输入中单个字符识别不同
缺少训练样本
无法构建分类模型

实例：与中华字库工程相关
实例：与中华字库工程相关
26包：外字与中间字排重工具
难点
特征匹配的准确性比模型分类低
解决方法：
（1）提供较多的候选，保证较高召回率
（2）利用其它的先验知识，辅助匹配的准确率
中间字模板生成的图像形式不一
康熙字体
楷体
拟解决方法：
笔划瘦化方法尽可能缩减形状差异

性能状况：印刷体汉字识别
性能状况：印刷体汉字识别

性能：印刷
性能：印刷/
/手写数字识别
手写数字识别

性能：脱机手写汉字识别
性能：脱机手写汉字识别

文字识别领域简介
文字识别领域简介
文字识别学科背景
文字识别研究对象
文字识别研究前沿
文字识别应用趋势

文字识别学科背景
文字识别学科背景

文字识别研究对象
文字识别研究对象

研究前沿
研究前沿

研究前沿
研究前沿

研究前沿
研究前沿

研究前沿
研究前沿

应用趋势

研讨一：linux下手写输入法调研

Linux下的手写输入法
Fctix-handwriting
TegakiProject
Tomoe
CellWriter
Ibus-handwrite

Fctix-handwriting
采用GTK界面和dubs通信机制
采用zinnia识别引擎
打开命令行模式，输入fcitx-handwriting或
fctixhandwriting即可运行

TegakiProject
Open-Source Chinese and Japanese Handwriting 
Recognition
特点
–界面设计参考fcitx-handwriting
–支持多平台: Linux、windows、Mac os
–汉字（简繁体）、日文
–两种识别引擎：Zinnia、
Wagomu
–支持PC和移动设备

Tomoe
全称TegakiOnline Moji recognition Engine
“Tegaki” means “handwriting” Moji menas“letter”
2015年8月5日更新最新版本
tomoe-0.6.0
支持中文、日文
扩展到其它文字

CellWriter
基于格子的手写输入
Writer-dependent
多种语言支持
集成识别和训练模块在一个界面

Ibus-handwrite
由微软的蔡万昭（网络名称）开发
支持中文简繁以及日文
2套识别引擎
早期使用的引擎来自http://zinnia.sourceforge.net/
改开发新引擎名字暂定为lucykila引擎原理见源码
README 
可以在使用的过程中动态切换引擎
日文输入法只能使用zinnia 引擎

对研讨问题1的回答
Linux手写输入法适用的群体是哪些？哪些又是主要而
且忠实的用户？你认为他们选择手写输入法的理由是什
么？
使用群体：
对拼音使用不熟悉，却知道怎么写字的人。
一些特殊的人士，没法像正常人一样用拼音打字，却可以
写出笔画，linux手写输入法能极大的帮助他们办公生活
。
一些工作人员，要使用一些特殊的字符（如公式）或者图
形化的符号等。
一些对手写识别感兴趣的人。

对研讨问题1的回答
主要且忠实的用户：
对拼音使用不熟悉，却知道怎么写字的人。
一些工作人员，要使用一些特殊的字符（如公式）或者图
形化的符号等。
理由:
特定的需求和条件，决定了linux手写输入法是个更好的选
择。
10

对研讨问题2的回答
传统的输入法面临语音识别等新兴技术的冲击，linux
手
写的输入法的前景在哪呢？它可以凭借什么特点和优势
在竞争激烈的市场上站稳脚跟呢？
前景在于发掘手写输入法的独特优势。
优势和特点：
无声的特点，一般办公的地点，语音识别并不适用，
否则
会干扰到其他人。
手写的特点在于，它可以写出很多生僻字和符号，这也是
手写识别的一个极大的优势。
手写识别可以考虑它在流程图等图形化的上面的扩展应用
11

对研讨问题3的回答
影响linux手写输入法性能的因素有哪些，对不同的文字
（如中文、英文、少数民族文字等等）而言，对手写输
入法的设计要求有哪些不同？
影响性能因素：
手写识别引擎的识别精度
手写识别引擎的识别速度
手写输入界面的易用性
不同文字对输入法的设计要求
根据文字的语言特点，确定是否支持单个字符输入或字符
串输入
如汉字可支持单个汉字和连续汉字输入，而蒙古文需支持蒙
古文词语输入等
12

对研讨问题3的回答
不同文字对输入法的设计要求
不同特点的文字，使用的识别引擎不同
根据文字的书写特点，输入界面的布局不同，如中文英文
等支持从左到右书写，而蒙古文支持从上到下书写


研讨二：Linux手写&扫描输入调研以及与键盘输
入比较
2

研讨问题1答案要点
目前手写输入的软硬件已经商业化且价格便宜，
但仅
有很少用户会完全抛弃键盘输入而改用手写输入，从
汉字结构、笔画数、手写疲劳程度等多个方面探讨这
些因素对手写输入的影响。
笔画数
汉字结构
手写疲劳程度
其它方面

笔画数对手写输入速度影响
手写反应时间随着笔画数增加而增加；
不同汉字结构，笔画数影响最大；
反应时间最终影响手写识别速度；
尽管手写输入提供边写边识别，用户更习惯写完整个汉字。
不同笔画数的影响不同结构不同笔画数的影响

笔画数对手写错误率影响
错误率随笔画数增加而增加；
不同结构笔画数影响存在一定差异，总体上取决于笔画数；
不同笔画数的影响不同结构不同笔画数的影响

汉字结构对手写反应时间影响
不同结构反应时间存在一定差异；
相同笔画数条件下，结构对反应时间影响不大；
不同结构的影响同种笔画数不同结构的影响

手写结构对手写错误率的影响
不同结构的错误率不同；
左右结构的错误率最大，原因：该结构的汉字类别多且相似汉字较多
；
不同结构的错误率有差异，但差异不大。
同种笔画数不同结构的影响不同结构的影响

手写疲劳程度
与键盘输入相比，无显著差异

其它
熟练掌握键盘布局及编码规则，键盘输入的速度比手写输入
更快；
手写输入对草体的识别性能有待改进；
手写输入支持连续书写的能力比较有限。

研讨问题2答案要点
手持移动设备已有支持高精度的手写输入法，能满足用户
的需求，然而对扫描输入而言，尤其输入图像是手写文档
，手写识别还不能达到用户需求。请分析扫描输入和手写
输入的不同，并根据扫描输入中的识别流程，分析影响识
别结果的多个因素，其中哪些因素可通过改进扫描设备降
低影响，哪些因素可通过算法改进？

扫描输入的识别流程

信号获取
图像质量直接影响着最终的识别结果
图像源质量差
历史文档中图像退化、噪声点较多
图像扫描设备的性能差
改进设备尽可能提高图像获取质量

版面分析
复杂的版面结构是难点
改进算法

字符切分、字符识别
在识别过程中，这两个过程目前算法相对比较成熟，
但仍需
改进
后处理
借助语言模型，仍有改进空间

与手写输入相比
处理的输入对象不同
扫描输入处理的是图像，图像属于静态信息。
手写输入处理的是坐标序列，属动态信息，包括笔划的先后和位置信息。
手写输入可利用更多的信息获得较好的识别结果。
处理的识别单元不同
手持输入支持单个汉字和词语（如中文）。
扫描输入通常处理的文档。
文档结构的对象更加复杂，处理比较困难。

研讨问题3答案要点
调研键盘输入（以拼音为例）和手写输入的用户使用习惯
，并总结这两种输入法的特点（优缺点）及应用前景
。
键盘输入特点（拼音输入为例）
基于拼音的输入
用户需掌握两项技能：
汉字拼音
对拼音水平要求高，输入不认识的字比较困难
熟悉键盘布局
熟悉键盘，需要大量的训练时间

键盘输入
优点：
对于连续字符输入支持好，键盘输入法产品众多。
熟悉键盘布局后，打字速度较快。
缺点：
必须熟悉键盘布局，这是一个前提条件
必须熟悉汉字的拼音，否则无从下手。
前景好：
键盘输入早已占领市场，手写输入法很难撼动霸主的地位，
并且拼音输入法也与时俱进如智能手机主要还是键盘输入法。

手写输入特点
基于字形的输入
类似于传统纸笔方式的书写习惯
用户无需进行专门的训练就可以使用
一种容易掌握、更加自然的输入方式
仅在感受上略微占优

手写输入法
优点:
简单容易上手，不需要熟悉键盘，只要认识汉字即可。
可以输出一些生僻字和符号。
缺点：
书写速度慢。
对于连续输入效果支持不佳。
前景好：
手写输入，现在随着机器学习理论的深入，字符识别算法精确度的
提高和硬件设备的精确度的提高，及广大消费者对电子产品的需求量增大，手写输入法的前景很好，而且手写输入法还处在早期
，很多手写的优势还没有发掘出来，如在图形化方面的应用等，极有潜力。


